{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import MonacoEditor from'@monaco-editor/react';import prettier from'prettier';import parser from'prettier/parser-babel';import'./syntax.css';import'./code-editor.css';import{parse}from'@babel/parser';import traverse from'@babel/traverse';import MonacoJSXHighlighter from'monaco-jsx-highlighter';var CodeEditor=function CodeEditor(_ref){var value=_ref.value,onChange=_ref.onChange;var handleEditorDidMount=function handleEditorDidMount(editor,monaco){var monacoJSXHighlighter=new MonacoJSXHighlighter(monaco,// references Range and other APIs\nparse,// obtains an AST, internally passes to parse options: {...options, sourceType: \"module\",plugins: [\"jsx\"],errorRecovery: true}\ntraverse,// helps collecting the JSX expressions within the AST\neditor// highlights the content of that editor via decorations\n);monacoJSXHighlighter.highlightOnDidChangeModelContent();};var handleEditorChange=function handleEditorChange(code){onChange(code||'');};var onFormatClick=function onFormatClick(){var formattedCode=prettier.format(value,{parser:'babel',plugins:[parser],useTabs:false,semi:true,singleQuote:true}).replace(/\\n$/,'');onChange(formattedCode);};return/*#__PURE__*/_jsxs(\"div\",{className:\"editor-wrapper\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"button button-format is-primary is-small\",onClick:onFormatClick,children:\"Format\"}),/*#__PURE__*/_jsx(MonacoEditor,{onMount:handleEditorDidMount,theme:\"vs-dark\",height:\"100%\",defaultLanguage:\"javascript\",defaultValue:\"const a = 1\",onChange:handleEditorChange,value:value,options:{wordWrap:'on',minimap:{enabled:false},showUnused:false,folding:false,lineNumbersMinChars:3,fontSize:16,// scrollBeyondLine: false,\nautomaticLayout:true// tabsize: 2,\n}})]});};export default CodeEditor;","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/src/components/code-editor.tsx"],"names":["MonacoEditor","prettier","parser","parse","traverse","MonacoJSXHighlighter","CodeEditor","value","onChange","handleEditorDidMount","editor","monaco","monacoJSXHighlighter","highlightOnDidChangeModelContent","handleEditorChange","code","onFormatClick","formattedCode","format","plugins","useTabs","semi","singleQuote","replace","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","automaticLayout"],"mappings":"wFAAA,MAAOA,CAAAA,YAAP,KAAgD,sBAAhD,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CACA,MAAO,cAAP,CACA,MAAO,mBAAP,CACA,OAASC,KAAT,KAAsB,eAAtB,CACA,MAAOC,CAAAA,QAAP,KAAqB,iBAArB,CACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CAOA,GAAMC,CAAAA,UAAqC,CAAG,QAAxCA,CAAAA,UAAwC,MAAyB,IAAtBC,CAAAA,KAAsB,MAAtBA,KAAsB,CAAfC,QAAe,MAAfA,QAAe,CACrE,GAAMC,CAAAA,oBAA6B,CAAG,QAAhCA,CAAAA,oBAAgC,CAACC,MAAD,CAASC,MAAT,CAAoB,CACxD,GAAMC,CAAAA,oBAAoB,CAAG,GAAIP,CAAAA,oBAAJ,CAC3BM,MAD2B,CACnB;AACRR,KAF2B,CAEpB;AACPC,QAH2B,CAGjB;AACVM,MAAO;AAJoB,CAA7B,CAOAE,oBAAoB,CAACC,gCAArB,GACD,CATD,CAWA,GAAMC,CAAAA,kBAA4B,CAAG,QAA/BA,CAAAA,kBAA+B,CAACC,IAAD,CAAU,CAC7CP,QAAQ,CAACO,IAAI,EAAI,EAAT,CAAR,CACD,CAFD,CAIA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAMC,CAAAA,aAAa,CAAGhB,QAAQ,CAC3BiB,MADmB,CACZX,KADY,CACL,CACbL,MAAM,CAAE,OADK,CAEbiB,OAAO,CAAE,CAACjB,MAAD,CAFI,CAGbkB,OAAO,CAAE,KAHI,CAIbC,IAAI,CAAE,IAJO,CAKbC,WAAW,CAAE,IALA,CADK,EAQnBC,OARmB,CAQX,KARW,CAQJ,EARI,CAAtB,CASAf,QAAQ,CAACS,aAAD,CAAR,CACD,CAXD,CAaA,mBACE,aAAK,SAAS,CAAC,gBAAf,wBACE,eACE,SAAS,CAAC,0CADZ,CAEE,OAAO,CAAED,aAFX,oBADF,cAOE,KAAC,YAAD,EACE,OAAO,CAAEP,oBADX,CAEE,KAAK,CAAC,SAFR,CAGE,MAAM,CAAC,MAHT,CAIE,eAAe,CAAC,YAJlB,CAKE,YAAY,CAAC,aALf,CAME,QAAQ,CAAEK,kBANZ,CAOE,KAAK,CAAEP,KAPT,CAQE,OAAO,CAAE,CACPiB,QAAQ,CAAE,IADH,CAEPC,OAAO,CAAE,CAAEC,OAAO,CAAE,KAAX,CAFF,CAGPC,UAAU,CAAE,KAHL,CAIPC,OAAO,CAAE,KAJF,CAKPC,mBAAmB,CAAE,CALd,CAMPC,QAAQ,CAAE,EANH,CAOP;AACAC,eAAe,CAAE,IACjB;AATO,CARX,EAPF,GADF,CA8BD,CA3DD,CA4DA,cAAezB,CAAAA,UAAf","sourcesContent":["import MonacoEditor, { OnChange, OnMount } from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport './syntax.css';\nimport './code-editor.css';\nimport { parse } from '@babel/parser';\nimport traverse from '@babel/traverse';\nimport MonacoJSXHighlighter from 'monaco-jsx-highlighter';\n\ninterface CodeEditorProps {\n  value: string;\n  onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ value, onChange }) => {\n  const handleEditorDidMount: OnMount = (editor, monaco) => {\n    const monacoJSXHighlighter = new MonacoJSXHighlighter(\n      monaco, // references Range and other APIs\n      parse, // obtains an AST, internally passes to parse options: {...options, sourceType: \"module\",plugins: [\"jsx\"],errorRecovery: true}\n      traverse, // helps collecting the JSX expressions within the AST\n      editor // highlights the content of that editor via decorations\n    );\n\n    monacoJSXHighlighter.highlightOnDidChangeModelContent();\n  };\n\n  const handleEditorChange: OnChange = (code) => {\n    onChange(code || '');\n  };\n\n  const onFormatClick = () => {\n    const formattedCode = prettier\n      .format(value, {\n        parser: 'babel',\n        plugins: [parser],\n        useTabs: false,\n        semi: true,\n        singleQuote: true,\n      })\n      .replace(/\\n$/, '');\n    onChange(formattedCode);\n  };\n\n  return (\n    <div className=\"editor-wrapper\">\n      <button\n        className=\"button button-format is-primary is-small\"\n        onClick={onFormatClick}\n      >\n        Format\n      </button>\n      <MonacoEditor\n        onMount={handleEditorDidMount}\n        theme=\"vs-dark\"\n        height=\"100%\"\n        defaultLanguage=\"javascript\"\n        defaultValue=\"const a = 1\"\n        onChange={handleEditorChange}\n        value={value}\n        options={{\n          wordWrap: 'on',\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          // scrollBeyondLine: false,\n          automaticLayout: true,\n          // tabsize: 2,\n        }}\n      />\n    </div>\n  );\n};\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}