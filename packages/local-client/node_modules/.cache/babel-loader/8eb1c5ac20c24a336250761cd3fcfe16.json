{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/utoker/Projects/utcode/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport bundle from '../bundler';\nimport { useActions } from '../hooks/use-actions';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const [code, setCode] = useState('');\n  const [err, setErr] = useState('');\n  const {\n    updateCell\n  } = useActions();\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      const output = await bundle(cell.content);\n      setCode(output.code);\n      setErr(output.err);\n    }, 800);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          value: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        code: code,\n        BundleStatus: err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"qkTsuoMb24prTEAY30ewwlfowq8=\", false, function () {\n  return [useActions];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/home/utoker/Projects/utcode/src/components/code-cell.tsx"],"names":["useEffect","useState","bundle","useActions","CodeEditor","Preview","Resizable","CodeCell","cell","code","setCode","err","setErr","updateCell","timer","setTimeout","output","content","clearTimeout","height","display","flexDirection","value","id"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAKA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACtD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,EAAD,CAA9B;AAEA,QAAM;AAAEY,IAAAA;AAAF,MAAiBV,UAAU,EAAjC;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,KAAK,GAAGC,UAAU,CAAC,YAAY;AACnC,YAAMC,MAAM,GAAG,MAAMd,MAAM,CAACM,IAAI,CAACS,OAAN,CAA3B;AACAP,MAAAA,OAAO,CAACM,MAAM,CAACP,IAAR,CAAP;AACAG,MAAAA,MAAM,CAACI,MAAM,CAACL,GAAR,CAAN;AACD,KAJuB,EAIrB,GAJqB,CAAxB;AAKA,WAAO,MAAM;AACXO,MAAAA,YAAY,CAACJ,KAAD,CAAZ;AACD,KAFD;AAGD,GATQ,EASN,CAACN,IAAI,CAACS,OAAN,CATM,CAAT;AAWA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACE;AACE,MAAA,KAAK,EAAE;AACLE,QAAAA,MAAM,EAAE,mBADH;AAELC,QAAAA,OAAO,EAAE,MAFJ;AAGLC,QAAAA,aAAa,EAAE;AAHV,OADT;AAAA,8BAOE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,KAAK,EAAEb,IAAI,CAACS,OADd;AAEE,UAAA,QAAQ,EAAGK,KAAD,IAAWT,UAAU,CAACL,IAAI,CAACe,EAAN,EAAUD,KAAV;AAFjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAaE,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEb,IAAf;AAAqB,QAAA,YAAY,EAAEE;AAAnC;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAnCD;;GAAMJ,Q;UAImBJ,U;;;KAJnBI,Q;AAqCN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport bundle from '../bundler';\nimport { useActions } from '../hooks/use-actions';\nimport { Cell } from '../state';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\n\ninterface CodeCellProps {\n  cell: Cell;\n}\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n  const [code, setCode] = useState('');\n  const [err, setErr] = useState('');\n\n  const { updateCell } = useActions();\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      const output = await bundle(cell.content);\n      setCode(output.code);\n      setErr(output.err);\n    }, 800);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content]);\n\n  return (\n    <Resizable direction=\"vertical\">\n      <div\n        style={{\n          height: 'calc(100% - 10px)',\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <Resizable direction=\"horizontal\">\n          <CodeEditor\n            value={cell.content}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n        <Preview code={code} BundleStatus={err} />\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}