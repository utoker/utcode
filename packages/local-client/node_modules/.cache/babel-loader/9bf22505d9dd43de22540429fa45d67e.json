{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _createForOfIteratorHelper = require(\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renamer = _interopRequireDefault(require(\"./lib/renamer\"));\n\nvar _index = _interopRequireDefault(require(\"../index\"));\n\nvar _binding = _interopRequireDefault(require(\"./binding\"));\n\nvar _globals = _interopRequireDefault(require(\"globals\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _cache = require(\"../cache\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction gatherNodeParts(node, parts) {\n  switch (node == null ? void 0 : node.type) {\n    default:\n      if (t.isModuleDeclaration(node)) {\n        if (node.source) {\n          gatherNodeParts(node.source, parts);\n        } else if (node.specifiers && node.specifiers.length) {\n          var _iterator = _createForOfIteratorHelper(node.specifiers),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var e = _step.value;\n              gatherNodeParts(e, parts);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else if (node.declaration) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (t.isModuleSpecifier(node)) {\n        gatherNodeParts(node.local, parts);\n      } else if (t.isLiteral(node)) {\n        parts.push(node.value);\n      }\n\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      var _iterator2 = _createForOfIteratorHelper(node.properties),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _e = _step2.value;\n          gatherNodeParts(_e, parts);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      parts.push(node.name);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\nvar collectorVisitor = {\n  For: function For(path) {\n    var _iterator3 = _createForOfIteratorHelper(t.FOR_INIT_KEYS),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var declar = path.get(key);\n\n        if (declar.isVar()) {\n          var parentScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n          parentScope.registerBinding(\"var\", declar);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  },\n  Declaration: function Declaration(path) {\n    if (path.isBlockScoped()) return;\n\n    if (path.isExportDeclaration() && path.get(\"declaration\").isDeclaration()) {\n      return;\n    }\n\n    var parent = path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n  ReferencedIdentifier: function ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n  ForXStatement: function ForXStatement(path, state) {\n    var left = path.get(\"left\");\n\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n  },\n  ExportDeclaration: {\n    exit: function exit(path) {\n      var node = path.node,\n          scope = path.scope;\n      var declar = node.declaration;\n\n      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {\n        var id = declar.id;\n        if (!id) return;\n        var binding = scope.getBinding(id.name);\n        if (binding) binding.reference(path);\n      } else if (t.isVariableDeclaration(declar)) {\n        var _iterator4 = _createForOfIteratorHelper(declar.declarations),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var decl = _step4.value;\n\n            for (var _i = 0, _Object$keys = Object.keys(t.getBindingIdentifiers(decl)); _i < _Object$keys.length; _i++) {\n              var name = _Object$keys[_i];\n\n              var _binding2 = scope.getBinding(name);\n\n              if (_binding2) _binding2.reference(path);\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }\n  },\n  LabeledStatement: function LabeledStatement(path) {\n    path.scope.getProgramParent().addGlobal(path.node);\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n  AssignmentExpression: function AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n  UpdateExpression: function UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n  UnaryExpression: function UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n  BlockScoped: function BlockScoped(path) {\n    var scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n    var parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    if (path.isClassDeclaration() && path.node.id) {\n      var id = path.node.id;\n      var name = id.name;\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n  Block: function Block(path) {\n    var paths = path.get(\"body\");\n\n    var _iterator5 = _createForOfIteratorHelper(paths),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var bodyPath = _step5.value;\n\n        if (bodyPath.isFunctionDeclaration()) {\n          path.scope.getBlockParent().registerDeclaration(bodyPath);\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  },\n  CatchClause: function CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n  Function: function Function(path) {\n    if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n\n    var params = path.get(\"params\");\n\n    var _iterator6 = _createForOfIteratorHelper(params),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var param = _step6.value;\n        path.scope.registerBinding(\"param\", param);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  },\n  ClassExpression: function ClassExpression(path) {\n    if (path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path);\n    }\n  }\n};\nvar uid = 0;\n\nvar Scope = /*#__PURE__*/function () {\n  function Scope(path) {\n    _classCallCheck(this, Scope);\n\n    var node = path.node;\n\n    var cached = _cache.scope.get(node);\n\n    if ((cached == null ? void 0 : cached.path) === path) {\n      return cached;\n    }\n\n    _cache.scope.set(node, this);\n\n    this.uid = uid++;\n    this.block = node;\n    this.path = path;\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  _createClass(Scope, [{\n    key: \"traverse\",\n    value: function traverse(node, opts, state) {\n      (0, _index.default)(node, opts, this, state, this.path);\n    }\n  }, {\n    key: \"generateDeclaredUidIdentifier\",\n    value: function generateDeclaredUidIdentifier(name) {\n      var id = this.generateUidIdentifier(name);\n      this.push({\n        id: id\n      });\n      return t.cloneNode(id);\n    }\n  }, {\n    key: \"generateUidIdentifier\",\n    value: function generateUidIdentifier(name) {\n      return t.identifier(this.generateUid(name));\n    }\n  }, {\n    key: \"generateUid\",\n    value: function generateUid() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"temp\";\n      name = t.toIdentifier(name).replace(/^_+/, \"\").replace(/[0-9]+$/g, \"\");\n      var uid;\n      var i = 1;\n\n      do {\n        uid = this._generateUid(name, i);\n        i++;\n      } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));\n\n      var program = this.getProgramParent();\n      program.references[uid] = true;\n      program.uids[uid] = true;\n      return uid;\n    }\n  }, {\n    key: \"_generateUid\",\n    value: function _generateUid(name, i) {\n      var id = name;\n      if (i > 1) id += i;\n      return \"_\".concat(id);\n    }\n  }, {\n    key: \"generateUidBasedOnNode\",\n    value: function generateUidBasedOnNode(node, defaultName) {\n      var parts = [];\n      gatherNodeParts(node, parts);\n      var id = parts.join(\"$\");\n      id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n      return this.generateUid(id.slice(0, 20));\n    }\n  }, {\n    key: \"generateUidIdentifierBasedOnNode\",\n    value: function generateUidIdentifierBasedOnNode(node, defaultName) {\n      return t.identifier(this.generateUidBasedOnNode(node, defaultName));\n    }\n  }, {\n    key: \"isStatic\",\n    value: function isStatic(node) {\n      if (t.isThisExpression(node) || t.isSuper(node)) {\n        return true;\n      }\n\n      if (t.isIdentifier(node)) {\n        var binding = this.getBinding(node.name);\n\n        if (binding) {\n          return binding.constant;\n        } else {\n          return this.hasBinding(node.name);\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeGenerateMemoised\",\n    value: function maybeGenerateMemoised(node, dontPush) {\n      if (this.isStatic(node)) {\n        return null;\n      } else {\n        var id = this.generateUidIdentifierBasedOnNode(node);\n\n        if (!dontPush) {\n          this.push({\n            id: id\n          });\n          return t.cloneNode(id);\n        }\n\n        return id;\n      }\n    }\n  }, {\n    key: \"checkBlockScopedCollisions\",\n    value: function checkBlockScopedCollisions(local, kind, name, id) {\n      if (kind === \"param\") return;\n      if (local.kind === \"local\") return;\n      var duplicate = kind === \"let\" || local.kind === \"let\" || local.kind === \"const\" || local.kind === \"module\" || local.kind === \"param\" && (kind === \"let\" || kind === \"const\");\n\n      if (duplicate) {\n        throw this.hub.buildError(id, \"Duplicate declaration \\\"\".concat(name, \"\\\"\"), TypeError);\n      }\n    }\n  }, {\n    key: \"rename\",\n    value: function rename(oldName, newName, block) {\n      var binding = this.getBinding(oldName);\n\n      if (binding) {\n        newName = newName || this.generateUidIdentifier(oldName).name;\n        return new _renamer.default(binding, oldName, newName).rename(block);\n      }\n    }\n  }, {\n    key: \"_renameFromMap\",\n    value: function _renameFromMap(map, oldName, newName, value) {\n      if (map[oldName]) {\n        map[newName] = value;\n        map[oldName] = null;\n      }\n    }\n  }, {\n    key: \"dump\",\n    value: function dump() {\n      var sep = \"-\".repeat(60);\n      console.log(sep);\n      var scope = this;\n\n      do {\n        console.log(\"#\", scope.block.type);\n\n        for (var _i2 = 0, _Object$keys2 = Object.keys(scope.bindings); _i2 < _Object$keys2.length; _i2++) {\n          var name = _Object$keys2[_i2];\n          var binding = scope.bindings[name];\n          console.log(\" -\", name, {\n            constant: binding.constant,\n            references: binding.references,\n            violations: binding.constantViolations.length,\n            kind: binding.kind\n          });\n        }\n      } while (scope = scope.parent);\n\n      console.log(sep);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray(node, i, allowArrayLike) {\n      if (t.isIdentifier(node)) {\n        var binding = this.getBinding(node.name);\n\n        if ((binding == null ? void 0 : binding.constant) && binding.path.isGenericType(\"Array\")) {\n          return node;\n        }\n      }\n\n      if (t.isArrayExpression(node)) {\n        return node;\n      }\n\n      if (t.isIdentifier(node, {\n        name: \"arguments\"\n      })) {\n        return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier(\"Array\"), t.identifier(\"prototype\")), t.identifier(\"slice\")), t.identifier(\"call\")), [node]);\n      }\n\n      var helperName;\n      var args = [node];\n\n      if (i === true) {\n        helperName = \"toConsumableArray\";\n      } else if (i) {\n        args.push(t.numericLiteral(i));\n        helperName = \"slicedToArray\";\n      } else {\n        helperName = \"toArray\";\n      }\n\n      if (allowArrayLike) {\n        args.unshift(this.hub.addHelper(helperName));\n        helperName = \"maybeArrayLike\";\n      }\n\n      return t.callExpression(this.hub.addHelper(helperName), args);\n    }\n  }, {\n    key: \"hasLabel\",\n    value: function hasLabel(name) {\n      return !!this.getLabel(name);\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(name) {\n      return this.labels.get(name);\n    }\n  }, {\n    key: \"registerLabel\",\n    value: function registerLabel(path) {\n      this.labels.set(path.node.label.name, path);\n    }\n  }, {\n    key: \"registerDeclaration\",\n    value: function registerDeclaration(path) {\n      if (path.isLabeledStatement()) {\n        this.registerLabel(path);\n      } else if (path.isFunctionDeclaration()) {\n        this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n      } else if (path.isVariableDeclaration()) {\n        var declarations = path.get(\"declarations\");\n\n        var _iterator7 = _createForOfIteratorHelper(declarations),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var declar = _step7.value;\n            this.registerBinding(path.node.kind, declar);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      } else if (path.isClassDeclaration()) {\n        this.registerBinding(\"let\", path);\n      } else if (path.isImportDeclaration()) {\n        var specifiers = path.get(\"specifiers\");\n\n        var _iterator8 = _createForOfIteratorHelper(specifiers),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var specifier = _step8.value;\n            this.registerBinding(\"module\", specifier);\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      } else if (path.isExportDeclaration()) {\n        var _declar = path.get(\"declaration\");\n\n        if (_declar.isClassDeclaration() || _declar.isFunctionDeclaration() || _declar.isVariableDeclaration()) {\n          this.registerDeclaration(_declar);\n        }\n      } else {\n        this.registerBinding(\"unknown\", path);\n      }\n    }\n  }, {\n    key: \"buildUndefinedNode\",\n    value: function buildUndefinedNode() {\n      return t.unaryExpression(\"void\", t.numericLiteral(0), true);\n    }\n  }, {\n    key: \"registerConstantViolation\",\n    value: function registerConstantViolation(path) {\n      var ids = path.getBindingIdentifiers();\n\n      for (var _i3 = 0, _Object$keys3 = Object.keys(ids); _i3 < _Object$keys3.length; _i3++) {\n        var name = _Object$keys3[_i3];\n        var binding = this.getBinding(name);\n        if (binding) binding.reassign(path);\n      }\n    }\n  }, {\n    key: \"registerBinding\",\n    value: function registerBinding(kind, path) {\n      var bindingPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : path;\n      if (!kind) throw new ReferenceError(\"no `kind`\");\n\n      if (path.isVariableDeclaration()) {\n        var declarators = path.get(\"declarations\");\n\n        var _iterator9 = _createForOfIteratorHelper(declarators),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var declar = _step9.value;\n            this.registerBinding(kind, declar);\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n\n        return;\n      }\n\n      var parent = this.getProgramParent();\n      var ids = path.getOuterBindingIdentifiers(true);\n\n      for (var _i4 = 0, _Object$keys4 = Object.keys(ids); _i4 < _Object$keys4.length; _i4++) {\n        var name = _Object$keys4[_i4];\n        parent.references[name] = true;\n\n        var _iterator10 = _createForOfIteratorHelper(ids[name]),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var id = _step10.value;\n            var local = this.getOwnBinding(name);\n\n            if (local) {\n              if (local.identifier === id) continue;\n              this.checkBlockScopedCollisions(local, kind, name, id);\n            }\n\n            if (local) {\n              this.registerConstantViolation(bindingPath);\n            } else {\n              this.bindings[name] = new _binding.default({\n                identifier: id,\n                scope: this,\n                path: bindingPath,\n                kind: kind\n              });\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n    }\n  }, {\n    key: \"addGlobal\",\n    value: function addGlobal(node) {\n      this.globals[node.name] = node;\n    }\n  }, {\n    key: \"hasUid\",\n    value: function hasUid(name) {\n      var scope = this;\n\n      do {\n        if (scope.uids[name]) return true;\n      } while (scope = scope.parent);\n\n      return false;\n    }\n  }, {\n    key: \"hasGlobal\",\n    value: function hasGlobal(name) {\n      var scope = this;\n\n      do {\n        if (scope.globals[name]) return true;\n      } while (scope = scope.parent);\n\n      return false;\n    }\n  }, {\n    key: \"hasReference\",\n    value: function hasReference(name) {\n      return !!this.getProgramParent().references[name];\n    }\n  }, {\n    key: \"isPure\",\n    value: function isPure(node, constantsOnly) {\n      if (t.isIdentifier(node)) {\n        var binding = this.getBinding(node.name);\n        if (!binding) return false;\n        if (constantsOnly) return binding.constant;\n        return true;\n      } else if (t.isClass(node)) {\n        if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n          return false;\n        }\n\n        return this.isPure(node.body, constantsOnly);\n      } else if (t.isClassBody(node)) {\n        var _iterator11 = _createForOfIteratorHelper(node.body),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var method = _step11.value;\n            if (!this.isPure(method, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n\n        return true;\n      } else if (t.isBinary(node)) {\n        return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);\n      } else if (t.isArrayExpression(node)) {\n        var _iterator12 = _createForOfIteratorHelper(node.elements),\n            _step12;\n\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var elem = _step12.value;\n            if (!this.isPure(elem, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n\n        return true;\n      } else if (t.isObjectExpression(node)) {\n        var _iterator13 = _createForOfIteratorHelper(node.properties),\n            _step13;\n\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var prop = _step13.value;\n            if (!this.isPure(prop, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n\n        return true;\n      } else if (t.isMethod(node)) {\n        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n        if (node.kind === \"get\" || node.kind === \"set\") return false;\n        return true;\n      } else if (t.isProperty(node)) {\n        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n        return this.isPure(node.value, constantsOnly);\n      } else if (t.isUnaryExpression(node)) {\n        return this.isPure(node.argument, constantsOnly);\n      } else if (t.isTaggedTemplateExpression(node)) {\n        return t.matchesPattern(node.tag, \"String.raw\") && !this.hasBinding(\"String\", true) && this.isPure(node.quasi, constantsOnly);\n      } else if (t.isTemplateLiteral(node)) {\n        var _iterator14 = _createForOfIteratorHelper(node.expressions),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var expression = _step14.value;\n            if (!this.isPure(expression, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n\n        return true;\n      } else {\n        return t.isPureish(node);\n      }\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(key, val) {\n      return this.data[key] = val;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(key) {\n      var scope = this;\n\n      do {\n        var data = scope.data[key];\n        if (data != null) return data;\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"removeData\",\n    value: function removeData(key) {\n      var scope = this;\n\n      do {\n        var data = scope.data[key];\n        if (data != null) scope.data[key] = null;\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      if (!this.inited) {\n        this.inited = true;\n        this.crawl();\n      }\n    }\n  }, {\n    key: \"crawl\",\n    value: function crawl() {\n      var path = this.path;\n      this.references = Object.create(null);\n      this.bindings = Object.create(null);\n      this.globals = Object.create(null);\n      this.uids = Object.create(null);\n      this.data = Object.create(null);\n\n      if (path.isFunction()) {\n        if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n          this.registerBinding(\"local\", path.get(\"id\"), path);\n        }\n\n        var params = path.get(\"params\");\n\n        var _iterator15 = _createForOfIteratorHelper(params),\n            _step15;\n\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var param = _step15.value;\n            this.registerBinding(\"param\", param);\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      }\n\n      var programParent = this.getProgramParent();\n      if (programParent.crawling) return;\n      var state = {\n        references: [],\n        constantViolations: [],\n        assignments: []\n      };\n      this.crawling = true;\n      path.traverse(collectorVisitor, state);\n      this.crawling = false;\n\n      var _iterator16 = _createForOfIteratorHelper(state.assignments),\n          _step16;\n\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var _path = _step16.value;\n\n          var ids = _path.getBindingIdentifiers();\n\n          for (var _i5 = 0, _Object$keys5 = Object.keys(ids); _i5 < _Object$keys5.length; _i5++) {\n            var name = _Object$keys5[_i5];\n            if (_path.scope.getBinding(name)) continue;\n            programParent.addGlobal(ids[name]);\n          }\n\n          _path.scope.registerConstantViolation(_path);\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n\n      var _iterator17 = _createForOfIteratorHelper(state.references),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var ref = _step17.value;\n          var binding = ref.scope.getBinding(ref.node.name);\n\n          if (binding) {\n            binding.reference(ref);\n          } else {\n            programParent.addGlobal(ref.node);\n          }\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      var _iterator18 = _createForOfIteratorHelper(state.constantViolations),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var _path2 = _step18.value;\n\n          _path2.scope.registerConstantViolation(_path2);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n    }\n  }, {\n    key: \"push\",\n    value: function push(opts) {\n      var path = this.path;\n\n      if (!path.isBlockStatement() && !path.isProgram()) {\n        path = this.getBlockParent().path;\n      }\n\n      if (path.isSwitchStatement()) {\n        path = (this.getFunctionParent() || this.getProgramParent()).path;\n      }\n\n      if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n        path.ensureBlock();\n        path = path.get(\"body\");\n      }\n\n      var unique = opts.unique;\n      var kind = opts.kind || \"var\";\n      var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n      var dataKey = \"declaration:\".concat(kind, \":\").concat(blockHoist);\n      var declarPath = !unique && path.getData(dataKey);\n\n      if (!declarPath) {\n        var declar = t.variableDeclaration(kind, []);\n        declar._blockHoist = blockHoist;\n\n        var _path$unshiftContaine = path.unshiftContainer(\"body\", [declar]);\n\n        var _path$unshiftContaine2 = _slicedToArray(_path$unshiftContaine, 1);\n\n        declarPath = _path$unshiftContaine2[0];\n        if (!unique) path.setData(dataKey, declarPath);\n      }\n\n      var declarator = t.variableDeclarator(opts.id, opts.init);\n      declarPath.node.declarations.push(declarator);\n      this.registerBinding(kind, declarPath.get(\"declarations\").pop());\n    }\n  }, {\n    key: \"getProgramParent\",\n    value: function getProgramParent() {\n      var scope = this;\n\n      do {\n        if (scope.path.isProgram()) {\n          return scope;\n        }\n      } while (scope = scope.parent);\n\n      throw new Error(\"Couldn't find a Program\");\n    }\n  }, {\n    key: \"getFunctionParent\",\n    value: function getFunctionParent() {\n      var scope = this;\n\n      do {\n        if (scope.path.isFunctionParent()) {\n          return scope;\n        }\n      } while (scope = scope.parent);\n\n      return null;\n    }\n  }, {\n    key: \"getBlockParent\",\n    value: function getBlockParent() {\n      var scope = this;\n\n      do {\n        if (scope.path.isBlockParent()) {\n          return scope;\n        }\n      } while (scope = scope.parent);\n\n      throw new Error(\"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\");\n    }\n  }, {\n    key: \"getAllBindings\",\n    value: function getAllBindings() {\n      var ids = Object.create(null);\n      var scope = this;\n\n      do {\n        for (var _i6 = 0, _Object$keys6 = Object.keys(scope.bindings); _i6 < _Object$keys6.length; _i6++) {\n          var key = _Object$keys6[_i6];\n\n          if (key in ids === false) {\n            ids[key] = scope.bindings[key];\n          }\n        }\n\n        scope = scope.parent;\n      } while (scope);\n\n      return ids;\n    }\n  }, {\n    key: \"getAllBindingsOfKind\",\n    value: function getAllBindingsOfKind() {\n      var ids = Object.create(null);\n\n      var _iterator19 = _createForOfIteratorHelper(arguments),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var kind = _step19.value;\n          var scope = this;\n\n          do {\n            for (var _i7 = 0, _Object$keys7 = Object.keys(scope.bindings); _i7 < _Object$keys7.length; _i7++) {\n              var name = _Object$keys7[_i7];\n              var binding = scope.bindings[name];\n              if (binding.kind === kind) ids[name] = binding;\n            }\n\n            scope = scope.parent;\n          } while (scope);\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      return ids;\n    }\n  }, {\n    key: \"bindingIdentifierEquals\",\n    value: function bindingIdentifierEquals(name, node) {\n      return this.getBindingIdentifier(name) === node;\n    }\n  }, {\n    key: \"getBinding\",\n    value: function getBinding(name) {\n      var scope = this;\n      var previousPath;\n\n      do {\n        var binding = scope.getOwnBinding(name);\n\n        if (binding) {\n          var _previousPath;\n\n          if (((_previousPath = previousPath) == null ? void 0 : _previousPath.isPattern()) && binding.kind !== \"param\") {} else {\n            return binding;\n          }\n        }\n\n        previousPath = scope.path;\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"getOwnBinding\",\n    value: function getOwnBinding(name) {\n      return this.bindings[name];\n    }\n  }, {\n    key: \"getBindingIdentifier\",\n    value: function getBindingIdentifier(name) {\n      var _this$getBinding;\n\n      return (_this$getBinding = this.getBinding(name)) == null ? void 0 : _this$getBinding.identifier;\n    }\n  }, {\n    key: \"getOwnBindingIdentifier\",\n    value: function getOwnBindingIdentifier(name) {\n      var binding = this.bindings[name];\n      return binding == null ? void 0 : binding.identifier;\n    }\n  }, {\n    key: \"hasOwnBinding\",\n    value: function hasOwnBinding(name) {\n      return !!this.getOwnBinding(name);\n    }\n  }, {\n    key: \"hasBinding\",\n    value: function hasBinding(name, noGlobals) {\n      if (!name) return false;\n      if (this.hasOwnBinding(name)) return true;\n      if (this.parentHasBinding(name, noGlobals)) return true;\n      if (this.hasUid(name)) return true;\n      if (!noGlobals && Scope.globals.includes(name)) return true;\n      if (!noGlobals && Scope.contextVariables.includes(name)) return true;\n      return false;\n    }\n  }, {\n    key: \"parentHasBinding\",\n    value: function parentHasBinding(name, noGlobals) {\n      var _this$parent;\n\n      return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, noGlobals);\n    }\n  }, {\n    key: \"moveBindingTo\",\n    value: function moveBindingTo(name, scope) {\n      var info = this.getBinding(name);\n\n      if (info) {\n        info.scope.removeOwnBinding(name);\n        info.scope = scope;\n        scope.bindings[name] = info;\n      }\n    }\n  }, {\n    key: \"removeOwnBinding\",\n    value: function removeOwnBinding(name) {\n      delete this.bindings[name];\n    }\n  }, {\n    key: \"removeBinding\",\n    value: function removeBinding(name) {\n      var _this$getBinding2;\n\n      (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.scope.removeOwnBinding(name);\n      var scope = this;\n\n      do {\n        if (scope.uids[name]) {\n          scope.uids[name] = false;\n        }\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var parent = this.path.findParent(function (p) {\n        return p.isScope();\n      });\n      return parent == null ? void 0 : parent.scope;\n    }\n  }, {\n    key: \"parentBlock\",\n    get: function get() {\n      return this.path.parent;\n    }\n  }, {\n    key: \"hub\",\n    get: function get() {\n      return this.path.hub;\n    }\n  }]);\n\n  return Scope;\n}();\n\nexports.default = Scope;\nScope.globals = Object.keys(_globals.default.builtin);\nScope.contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/node_modules/@babel/traverse/lib/scope/index.js"],"names":["Object","defineProperty","exports","value","default","_renamer","_interopRequireDefault","require","_index","_binding","_globals","t","_interopRequireWildcard","_cache","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","gatherNodeParts","node","parts","type","isModuleDeclaration","source","specifiers","length","e","declaration","isModuleSpecifier","local","isLiteral","push","object","property","name","callee","properties","argument","left","id","expression","meta","openingElement","openingFragment","namespace","collectorVisitor","For","path","FOR_INIT_KEYS","declar","isVar","parentScope","scope","getFunctionParent","getProgramParent","registerBinding","Declaration","isBlockScoped","isExportDeclaration","isDeclaration","parent","registerDeclaration","ReferencedIdentifier","state","references","ForXStatement","isPattern","isIdentifier","constantViolations","ExportDeclaration","exit","isClassDeclaration","isFunctionDeclaration","binding","getBinding","reference","isVariableDeclaration","declarations","decl","keys","getBindingIdentifiers","LabeledStatement","addGlobal","getBlockParent","AssignmentExpression","assignments","UpdateExpression","UnaryExpression","operator","BlockScoped","bindings","Block","paths","bodyPath","CatchClause","Function","isFunctionExpression","NOT_LOCAL_BINDING","params","param","ClassExpression","uid","Scope","cached","block","labels","Map","inited","opts","generateUidIdentifier","cloneNode","identifier","generateUid","toIdentifier","replace","i","_generateUid","hasLabel","hasBinding","hasGlobal","hasReference","program","uids","defaultName","join","slice","generateUidBasedOnNode","isThisExpression","isSuper","constant","dontPush","isStatic","generateUidIdentifierBasedOnNode","kind","duplicate","hub","buildError","TypeError","oldName","newName","rename","map","sep","repeat","console","log","violations","allowArrayLike","isGenericType","isArrayExpression","callExpression","memberExpression","helperName","args","numericLiteral","unshift","addHelper","getLabel","label","isLabeledStatement","registerLabel","isImportDeclaration","specifier","unaryExpression","ids","reassign","bindingPath","ReferenceError","declarators","getOuterBindingIdentifiers","getOwnBinding","checkBlockScopedCollisions","registerConstantViolation","globals","constantsOnly","isClass","superClass","isPure","body","isClassBody","method","isBinary","right","elements","elem","isObjectExpression","prop","isMethod","computed","isProperty","isUnaryExpression","isTaggedTemplateExpression","matchesPattern","tag","quasi","isTemplateLiteral","expressions","isPureish","val","data","crawl","create","isFunction","programParent","crawling","traverse","ref","isBlockStatement","isProgram","isSwitchStatement","isLoop","isCatchClause","ensureBlock","unique","blockHoist","_blockHoist","dataKey","declarPath","getData","variableDeclaration","unshiftContainer","setData","declarator","variableDeclarator","init","pop","Error","isFunctionParent","isBlockParent","arguments","getBindingIdentifier","previousPath","_previousPath","_this$getBinding","noGlobals","hasOwnBinding","parentHasBinding","hasUid","includes","contextVariables","_this$parent","info","removeOwnBinding","_this$getBinding2","findParent","p","isScope","builtin"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renamer = _interopRequireDefault(require(\"./lib/renamer\"));\n\nvar _index = _interopRequireDefault(require(\"../index\"));\n\nvar _binding = _interopRequireDefault(require(\"./binding\"));\n\nvar _globals = _interopRequireDefault(require(\"globals\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _cache = require(\"../cache\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction gatherNodeParts(node, parts) {\n  switch (node == null ? void 0 : node.type) {\n    default:\n      if (t.isModuleDeclaration(node)) {\n        if (node.source) {\n          gatherNodeParts(node.source, parts);\n        } else if (node.specifiers && node.specifiers.length) {\n          for (const e of node.specifiers) gatherNodeParts(e, parts);\n        } else if (node.declaration) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (t.isModuleSpecifier(node)) {\n        gatherNodeParts(node.local, parts);\n      } else if (t.isLiteral(node)) {\n        parts.push(node.value);\n      }\n\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      for (const e of node.properties) {\n        gatherNodeParts(e, parts);\n      }\n\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      parts.push(node.name);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\nconst collectorVisitor = {\n  For(path) {\n    for (const key of t.FOR_INIT_KEYS) {\n      const declar = path.get(key);\n\n      if (declar.isVar()) {\n        const parentScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n        parentScope.registerBinding(\"var\", declar);\n      }\n    }\n  },\n\n  Declaration(path) {\n    if (path.isBlockScoped()) return;\n\n    if (path.isExportDeclaration() && path.get(\"declaration\").isDeclaration()) {\n      return;\n    }\n\n    const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n\n  ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n\n  ForXStatement(path, state) {\n    const left = path.get(\"left\");\n\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n  },\n\n  ExportDeclaration: {\n    exit(path) {\n      const {\n        node,\n        scope\n      } = path;\n      const declar = node.declaration;\n\n      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {\n        const id = declar.id;\n        if (!id) return;\n        const binding = scope.getBinding(id.name);\n        if (binding) binding.reference(path);\n      } else if (t.isVariableDeclaration(declar)) {\n        for (const decl of declar.declarations) {\n          for (const name of Object.keys(t.getBindingIdentifiers(decl))) {\n            const binding = scope.getBinding(name);\n            if (binding) binding.reference(path);\n          }\n        }\n      }\n    }\n\n  },\n\n  LabeledStatement(path) {\n    path.scope.getProgramParent().addGlobal(path.node);\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n\n  AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n\n  UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n\n  UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n\n  BlockScoped(path) {\n    let scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n    const parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    if (path.isClassDeclaration() && path.node.id) {\n      const id = path.node.id;\n      const name = id.name;\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n\n  Block(path) {\n    const paths = path.get(\"body\");\n\n    for (const bodyPath of paths) {\n      if (bodyPath.isFunctionDeclaration()) {\n        path.scope.getBlockParent().registerDeclaration(bodyPath);\n      }\n    }\n  },\n\n  CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n\n  Function(path) {\n    if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n\n    const params = path.get(\"params\");\n\n    for (const param of params) {\n      path.scope.registerBinding(\"param\", param);\n    }\n  },\n\n  ClassExpression(path) {\n    if (path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path);\n    }\n  }\n\n};\nlet uid = 0;\n\nclass Scope {\n  constructor(path) {\n    const {\n      node\n    } = path;\n\n    const cached = _cache.scope.get(node);\n\n    if ((cached == null ? void 0 : cached.path) === path) {\n      return cached;\n    }\n\n    _cache.scope.set(node, this);\n\n    this.uid = uid++;\n    this.block = node;\n    this.path = path;\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  get parent() {\n    const parent = this.path.findParent(p => p.isScope());\n    return parent == null ? void 0 : parent.scope;\n  }\n\n  get parentBlock() {\n    return this.path.parent;\n  }\n\n  get hub() {\n    return this.path.hub;\n  }\n\n  traverse(node, opts, state) {\n    (0, _index.default)(node, opts, this, state, this.path);\n  }\n\n  generateDeclaredUidIdentifier(name) {\n    const id = this.generateUidIdentifier(name);\n    this.push({\n      id\n    });\n    return t.cloneNode(id);\n  }\n\n  generateUidIdentifier(name) {\n    return t.identifier(this.generateUid(name));\n  }\n\n  generateUid(name = \"temp\") {\n    name = t.toIdentifier(name).replace(/^_+/, \"\").replace(/[0-9]+$/g, \"\");\n    let uid;\n    let i = 1;\n\n    do {\n      uid = this._generateUid(name, i);\n      i++;\n    } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));\n\n    const program = this.getProgramParent();\n    program.references[uid] = true;\n    program.uids[uid] = true;\n    return uid;\n  }\n\n  _generateUid(name, i) {\n    let id = name;\n    if (i > 1) id += i;\n    return `_${id}`;\n  }\n\n  generateUidBasedOnNode(node, defaultName) {\n    const parts = [];\n    gatherNodeParts(node, parts);\n    let id = parts.join(\"$\");\n    id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n    return this.generateUid(id.slice(0, 20));\n  }\n\n  generateUidIdentifierBasedOnNode(node, defaultName) {\n    return t.identifier(this.generateUidBasedOnNode(node, defaultName));\n  }\n\n  isStatic(node) {\n    if (t.isThisExpression(node) || t.isSuper(node)) {\n      return true;\n    }\n\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n\n      if (binding) {\n        return binding.constant;\n      } else {\n        return this.hasBinding(node.name);\n      }\n    }\n\n    return false;\n  }\n\n  maybeGenerateMemoised(node, dontPush) {\n    if (this.isStatic(node)) {\n      return null;\n    } else {\n      const id = this.generateUidIdentifierBasedOnNode(node);\n\n      if (!dontPush) {\n        this.push({\n          id\n        });\n        return t.cloneNode(id);\n      }\n\n      return id;\n    }\n  }\n\n  checkBlockScopedCollisions(local, kind, name, id) {\n    if (kind === \"param\") return;\n    if (local.kind === \"local\") return;\n    const duplicate = kind === \"let\" || local.kind === \"let\" || local.kind === \"const\" || local.kind === \"module\" || local.kind === \"param\" && (kind === \"let\" || kind === \"const\");\n\n    if (duplicate) {\n      throw this.hub.buildError(id, `Duplicate declaration \"${name}\"`, TypeError);\n    }\n  }\n\n  rename(oldName, newName, block) {\n    const binding = this.getBinding(oldName);\n\n    if (binding) {\n      newName = newName || this.generateUidIdentifier(oldName).name;\n      return new _renamer.default(binding, oldName, newName).rename(block);\n    }\n  }\n\n  _renameFromMap(map, oldName, newName, value) {\n    if (map[oldName]) {\n      map[newName] = value;\n      map[oldName] = null;\n    }\n  }\n\n  dump() {\n    const sep = \"-\".repeat(60);\n    console.log(sep);\n    let scope = this;\n\n    do {\n      console.log(\"#\", scope.block.type);\n\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        console.log(\" -\", name, {\n          constant: binding.constant,\n          references: binding.references,\n          violations: binding.constantViolations.length,\n          kind: binding.kind\n        });\n      }\n    } while (scope = scope.parent);\n\n    console.log(sep);\n  }\n\n  toArray(node, i, allowArrayLike) {\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n\n      if ((binding == null ? void 0 : binding.constant) && binding.path.isGenericType(\"Array\")) {\n        return node;\n      }\n    }\n\n    if (t.isArrayExpression(node)) {\n      return node;\n    }\n\n    if (t.isIdentifier(node, {\n      name: \"arguments\"\n    })) {\n      return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier(\"Array\"), t.identifier(\"prototype\")), t.identifier(\"slice\")), t.identifier(\"call\")), [node]);\n    }\n\n    let helperName;\n    const args = [node];\n\n    if (i === true) {\n      helperName = \"toConsumableArray\";\n    } else if (i) {\n      args.push(t.numericLiteral(i));\n      helperName = \"slicedToArray\";\n    } else {\n      helperName = \"toArray\";\n    }\n\n    if (allowArrayLike) {\n      args.unshift(this.hub.addHelper(helperName));\n      helperName = \"maybeArrayLike\";\n    }\n\n    return t.callExpression(this.hub.addHelper(helperName), args);\n  }\n\n  hasLabel(name) {\n    return !!this.getLabel(name);\n  }\n\n  getLabel(name) {\n    return this.labels.get(name);\n  }\n\n  registerLabel(path) {\n    this.labels.set(path.node.label.name, path);\n  }\n\n  registerDeclaration(path) {\n    if (path.isLabeledStatement()) {\n      this.registerLabel(path);\n    } else if (path.isFunctionDeclaration()) {\n      this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n    } else if (path.isVariableDeclaration()) {\n      const declarations = path.get(\"declarations\");\n\n      for (const declar of declarations) {\n        this.registerBinding(path.node.kind, declar);\n      }\n    } else if (path.isClassDeclaration()) {\n      this.registerBinding(\"let\", path);\n    } else if (path.isImportDeclaration()) {\n      const specifiers = path.get(\"specifiers\");\n\n      for (const specifier of specifiers) {\n        this.registerBinding(\"module\", specifier);\n      }\n    } else if (path.isExportDeclaration()) {\n      const declar = path.get(\"declaration\");\n\n      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {\n        this.registerDeclaration(declar);\n      }\n    } else {\n      this.registerBinding(\"unknown\", path);\n    }\n  }\n\n  buildUndefinedNode() {\n    return t.unaryExpression(\"void\", t.numericLiteral(0), true);\n  }\n\n  registerConstantViolation(path) {\n    const ids = path.getBindingIdentifiers();\n\n    for (const name of Object.keys(ids)) {\n      const binding = this.getBinding(name);\n      if (binding) binding.reassign(path);\n    }\n  }\n\n  registerBinding(kind, path, bindingPath = path) {\n    if (!kind) throw new ReferenceError(\"no `kind`\");\n\n    if (path.isVariableDeclaration()) {\n      const declarators = path.get(\"declarations\");\n\n      for (const declar of declarators) {\n        this.registerBinding(kind, declar);\n      }\n\n      return;\n    }\n\n    const parent = this.getProgramParent();\n    const ids = path.getOuterBindingIdentifiers(true);\n\n    for (const name of Object.keys(ids)) {\n      parent.references[name] = true;\n\n      for (const id of ids[name]) {\n        const local = this.getOwnBinding(name);\n\n        if (local) {\n          if (local.identifier === id) continue;\n          this.checkBlockScopedCollisions(local, kind, name, id);\n        }\n\n        if (local) {\n          this.registerConstantViolation(bindingPath);\n        } else {\n          this.bindings[name] = new _binding.default({\n            identifier: id,\n            scope: this,\n            path: bindingPath,\n            kind: kind\n          });\n        }\n      }\n    }\n  }\n\n  addGlobal(node) {\n    this.globals[node.name] = node;\n  }\n\n  hasUid(name) {\n    let scope = this;\n\n    do {\n      if (scope.uids[name]) return true;\n    } while (scope = scope.parent);\n\n    return false;\n  }\n\n  hasGlobal(name) {\n    let scope = this;\n\n    do {\n      if (scope.globals[name]) return true;\n    } while (scope = scope.parent);\n\n    return false;\n  }\n\n  hasReference(name) {\n    return !!this.getProgramParent().references[name];\n  }\n\n  isPure(node, constantsOnly) {\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (!binding) return false;\n      if (constantsOnly) return binding.constant;\n      return true;\n    } else if (t.isClass(node)) {\n      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n        return false;\n      }\n\n      return this.isPure(node.body, constantsOnly);\n    } else if (t.isClassBody(node)) {\n      for (const method of node.body) {\n        if (!this.isPure(method, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isBinary(node)) {\n      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);\n    } else if (t.isArrayExpression(node)) {\n      for (const elem of node.elements) {\n        if (!this.isPure(elem, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isObjectExpression(node)) {\n      for (const prop of node.properties) {\n        if (!this.isPure(prop, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isMethod(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.kind === \"get\" || node.kind === \"set\") return false;\n      return true;\n    } else if (t.isProperty(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      return this.isPure(node.value, constantsOnly);\n    } else if (t.isUnaryExpression(node)) {\n      return this.isPure(node.argument, constantsOnly);\n    } else if (t.isTaggedTemplateExpression(node)) {\n      return t.matchesPattern(node.tag, \"String.raw\") && !this.hasBinding(\"String\", true) && this.isPure(node.quasi, constantsOnly);\n    } else if (t.isTemplateLiteral(node)) {\n      for (const expression of node.expressions) {\n        if (!this.isPure(expression, constantsOnly)) return false;\n      }\n\n      return true;\n    } else {\n      return t.isPureish(node);\n    }\n  }\n\n  setData(key, val) {\n    return this.data[key] = val;\n  }\n\n  getData(key) {\n    let scope = this;\n\n    do {\n      const data = scope.data[key];\n      if (data != null) return data;\n    } while (scope = scope.parent);\n  }\n\n  removeData(key) {\n    let scope = this;\n\n    do {\n      const data = scope.data[key];\n      if (data != null) scope.data[key] = null;\n    } while (scope = scope.parent);\n  }\n\n  init() {\n    if (!this.inited) {\n      this.inited = true;\n      this.crawl();\n    }\n  }\n\n  crawl() {\n    const path = this.path;\n    this.references = Object.create(null);\n    this.bindings = Object.create(null);\n    this.globals = Object.create(null);\n    this.uids = Object.create(null);\n    this.data = Object.create(null);\n\n    if (path.isFunction()) {\n      if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n        this.registerBinding(\"local\", path.get(\"id\"), path);\n      }\n\n      const params = path.get(\"params\");\n\n      for (const param of params) {\n        this.registerBinding(\"param\", param);\n      }\n    }\n\n    const programParent = this.getProgramParent();\n    if (programParent.crawling) return;\n    const state = {\n      references: [],\n      constantViolations: [],\n      assignments: []\n    };\n    this.crawling = true;\n    path.traverse(collectorVisitor, state);\n    this.crawling = false;\n\n    for (const path of state.assignments) {\n      const ids = path.getBindingIdentifiers();\n\n      for (const name of Object.keys(ids)) {\n        if (path.scope.getBinding(name)) continue;\n        programParent.addGlobal(ids[name]);\n      }\n\n      path.scope.registerConstantViolation(path);\n    }\n\n    for (const ref of state.references) {\n      const binding = ref.scope.getBinding(ref.node.name);\n\n      if (binding) {\n        binding.reference(ref);\n      } else {\n        programParent.addGlobal(ref.node);\n      }\n    }\n\n    for (const path of state.constantViolations) {\n      path.scope.registerConstantViolation(path);\n    }\n  }\n\n  push(opts) {\n    let path = this.path;\n\n    if (!path.isBlockStatement() && !path.isProgram()) {\n      path = this.getBlockParent().path;\n    }\n\n    if (path.isSwitchStatement()) {\n      path = (this.getFunctionParent() || this.getProgramParent()).path;\n    }\n\n    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n      path.ensureBlock();\n      path = path.get(\"body\");\n    }\n\n    const unique = opts.unique;\n    const kind = opts.kind || \"var\";\n    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n    const dataKey = `declaration:${kind}:${blockHoist}`;\n    let declarPath = !unique && path.getData(dataKey);\n\n    if (!declarPath) {\n      const declar = t.variableDeclaration(kind, []);\n      declar._blockHoist = blockHoist;\n      [declarPath] = path.unshiftContainer(\"body\", [declar]);\n      if (!unique) path.setData(dataKey, declarPath);\n    }\n\n    const declarator = t.variableDeclarator(opts.id, opts.init);\n    declarPath.node.declarations.push(declarator);\n    this.registerBinding(kind, declarPath.get(\"declarations\").pop());\n  }\n\n  getProgramParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isProgram()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    throw new Error(\"Couldn't find a Program\");\n  }\n\n  getFunctionParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isFunctionParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    return null;\n  }\n\n  getBlockParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isBlockParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    throw new Error(\"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\");\n  }\n\n  getAllBindings() {\n    const ids = Object.create(null);\n    let scope = this;\n\n    do {\n      for (const key of Object.keys(scope.bindings)) {\n        if (key in ids === false) {\n          ids[key] = scope.bindings[key];\n        }\n      }\n\n      scope = scope.parent;\n    } while (scope);\n\n    return ids;\n  }\n\n  getAllBindingsOfKind() {\n    const ids = Object.create(null);\n\n    for (const kind of arguments) {\n      let scope = this;\n\n      do {\n        for (const name of Object.keys(scope.bindings)) {\n          const binding = scope.bindings[name];\n          if (binding.kind === kind) ids[name] = binding;\n        }\n\n        scope = scope.parent;\n      } while (scope);\n    }\n\n    return ids;\n  }\n\n  bindingIdentifierEquals(name, node) {\n    return this.getBindingIdentifier(name) === node;\n  }\n\n  getBinding(name) {\n    let scope = this;\n    let previousPath;\n\n    do {\n      const binding = scope.getOwnBinding(name);\n\n      if (binding) {\n        var _previousPath;\n\n        if (((_previousPath = previousPath) == null ? void 0 : _previousPath.isPattern()) && binding.kind !== \"param\") {} else {\n          return binding;\n        }\n      }\n\n      previousPath = scope.path;\n    } while (scope = scope.parent);\n  }\n\n  getOwnBinding(name) {\n    return this.bindings[name];\n  }\n\n  getBindingIdentifier(name) {\n    var _this$getBinding;\n\n    return (_this$getBinding = this.getBinding(name)) == null ? void 0 : _this$getBinding.identifier;\n  }\n\n  getOwnBindingIdentifier(name) {\n    const binding = this.bindings[name];\n    return binding == null ? void 0 : binding.identifier;\n  }\n\n  hasOwnBinding(name) {\n    return !!this.getOwnBinding(name);\n  }\n\n  hasBinding(name, noGlobals) {\n    if (!name) return false;\n    if (this.hasOwnBinding(name)) return true;\n    if (this.parentHasBinding(name, noGlobals)) return true;\n    if (this.hasUid(name)) return true;\n    if (!noGlobals && Scope.globals.includes(name)) return true;\n    if (!noGlobals && Scope.contextVariables.includes(name)) return true;\n    return false;\n  }\n\n  parentHasBinding(name, noGlobals) {\n    var _this$parent;\n\n    return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, noGlobals);\n  }\n\n  moveBindingTo(name, scope) {\n    const info = this.getBinding(name);\n\n    if (info) {\n      info.scope.removeOwnBinding(name);\n      info.scope = scope;\n      scope.bindings[name] = info;\n    }\n  }\n\n  removeOwnBinding(name) {\n    delete this.bindings[name];\n  }\n\n  removeBinding(name) {\n    var _this$getBinding2;\n\n    (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.scope.removeOwnBinding(name);\n    let scope = this;\n\n    do {\n      if (scope.uids[name]) {\n        scope.uids[name] = false;\n      }\n    } while (scope = scope.parent);\n  }\n\n}\n\nexports.default = Scope;\nScope.globals = Object.keys(_globals.default.builtin);\nScope.contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];"]},"metadata":{},"sourceType":"script"}