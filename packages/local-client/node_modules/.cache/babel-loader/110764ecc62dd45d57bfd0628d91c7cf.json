{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./text-editor.css';import MDEditor from'@uiw/react-md-editor';import{useEffect,useRef,useState}from'react';import{useActions}from'../hooks/use-actions';var TextEditor=function TextEditor(_ref){var cell=_ref.cell;var ref=useRef(null);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),editing=_useState2[0],setEditing=_useState2[1];var _useActions=useActions(),updateCell=_useActions.updateCell;useEffect(function(){var listener=function listener(ev){if(ref.current&&ev.target&&ref.current.contains(ev.target)){return;}setEditing(false);};document.addEventListener('click',listener,{capture:true});return function(){document.removeEventListener('click',listener,{capture:true});};},[]);if(editing){return/*#__PURE__*/_jsx(\"div\",{ref:ref,className:\"text-editor card\",children:/*#__PURE__*/_jsx(\"div\",{className:\"card-content\",children:/*#__PURE__*/_jsx(MDEditor,{value:cell.content,onChange:function onChange(v){return updateCell(cell.id,v||'');}})})});}return/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){return setEditing(true);},className:\"text-editor card\",children:/*#__PURE__*/_jsx(MDEditor.Markdown,{source:cell.content||'Click to edit'})});};export default TextEditor;","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/src/components/text-editor.tsx"],"names":["MDEditor","useEffect","useRef","useState","useActions","TextEditor","cell","ref","editing","setEditing","updateCell","listener","ev","current","target","contains","document","addEventListener","capture","removeEventListener","content","v","id"],"mappings":"oNAAA,MAAO,mBAAP,CACA,MAAOA,CAAAA,QAAP,KAAqB,sBAArB,CACA,OAASC,SAAT,CAAoBC,MAApB,CAA4BC,QAA5B,KAA4C,OAA5C,CAEA,OAASC,UAAT,KAA2B,sBAA3B,CAMA,GAAMC,CAAAA,UAAqC,CAAG,QAAxCA,CAAAA,UAAwC,MAAc,IAAXC,CAAAA,IAAW,MAAXA,IAAW,CAC1D,GAAMC,CAAAA,GAAG,CAAGL,MAAM,CAAwB,IAAxB,CAAlB,CAD0D,cAE5BC,QAAQ,CAAC,KAAD,CAFoB,wCAEnDK,OAFmD,eAE1CC,UAF0C,+BAGnCL,UAAU,EAHyB,CAGlDM,UAHkD,aAGlDA,UAHkD,CAK1DT,SAAS,CAAC,UAAM,CACd,GAAMU,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,EAAD,CAAoB,CACnC,GAAIL,GAAG,CAACM,OAAJ,EAAeD,EAAE,CAACE,MAAlB,EAA4BP,GAAG,CAACM,OAAJ,CAAYE,QAAZ,CAAqBH,EAAE,CAACE,MAAxB,CAAhC,CAAyE,CACvE,OACD,CACDL,UAAU,CAAC,KAAD,CAAV,CACD,CALD,CAMAO,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmCN,QAAnC,CAA6C,CAAEO,OAAO,CAAE,IAAX,CAA7C,EACA,MAAO,WAAM,CACXF,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,CAAsCR,QAAtC,CAAgD,CAAEO,OAAO,CAAE,IAAX,CAAhD,EACD,CAFD,CAGD,CAXQ,CAWN,EAXM,CAAT,CAaA,GAAIV,OAAJ,CAAa,CACX,mBACE,YAAK,GAAG,CAAED,GAAV,CAAe,SAAS,CAAC,kBAAzB,uBACE,YAAK,SAAS,CAAC,cAAf,uBACE,KAAC,QAAD,EACE,KAAK,CAAED,IAAI,CAACc,OADd,CAEE,QAAQ,CAAE,kBAACC,CAAD,QAAOX,CAAAA,UAAU,CAACJ,IAAI,CAACgB,EAAN,CAAUD,CAAC,EAAI,EAAf,CAAjB,EAFZ,EADF,EADF,EADF,CAUD,CAED,mBACE,YAAK,OAAO,CAAE,yBAAMZ,CAAAA,UAAU,CAAC,IAAD,CAAhB,EAAd,CAAsC,SAAS,CAAC,kBAAhD,uBACE,KAAC,QAAD,CAAU,QAAV,EAAmB,MAAM,CAAEH,IAAI,CAACc,OAAL,EAAgB,eAA3C,EADF,EADF,CAKD,CApCD,CAqCA,cAAef,CAAAA,UAAf","sourcesContent":["import './text-editor.css';\nimport MDEditor from '@uiw/react-md-editor';\nimport { useEffect, useRef, useState } from 'react';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\n\ninterface TextEditorProps {\n  cell: Cell;\n}\n\nconst TextEditor: React.FC<TextEditorProps> = ({ cell }) => {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [editing, setEditing] = useState(false);\n  const { updateCell } = useActions();\n\n  useEffect(() => {\n    const listener = (ev: MouseEvent) => {\n      if (ref.current && ev.target && ref.current.contains(ev.target as Node)) {\n        return;\n      }\n      setEditing(false);\n    };\n    document.addEventListener('click', listener, { capture: true });\n    return () => {\n      document.removeEventListener('click', listener, { capture: true });\n    };\n  }, []);\n\n  if (editing) {\n    return (\n      <div ref={ref} className=\"text-editor card\">\n        <div className=\"card-content\">\n          <MDEditor\n            value={cell.content}\n            onChange={(v) => updateCell(cell.id, v || '')}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div onClick={() => setEditing(true)} className=\"text-editor card\">\n      <MDEditor.Markdown source={cell.content || 'Click to edit'} />\n    </div>\n  );\n};\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}