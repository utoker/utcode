{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = literalTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nvar _populate = _interopRequireDefault(require(\"./populate\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction literalTemplate(formatter, tpl, opts) {\n  var _buildLiteralData = buildLiteralData(formatter, tpl, opts),\n      metadata = _buildLiteralData.metadata,\n      names = _buildLiteralData.names;\n\n  return function (arg) {\n    var defaultReplacements = {};\n    arg.forEach(function (replacement, i) {\n      defaultReplacements[names[i]] = replacement;\n    });\n    return function (arg) {\n      var replacements = (0, _options.normalizeReplacements)(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(function (key) {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\n\nfunction buildLiteralData(formatter, tpl, opts) {\n  var names;\n  var nameSet;\n  var metadata;\n  var prefix = \"\";\n\n  do {\n    prefix += \"$\";\n    var result = buildTemplateCode(tpl, prefix);\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders\n    });\n  } while (metadata.placeholders.some(function (placeholder) {\n    return placeholder.isDuplicate && nameSet.has(placeholder.name);\n  }));\n\n  return {\n    metadata: metadata,\n    names: names\n  };\n}\n\nfunction buildTemplateCode(tpl, prefix) {\n  var names = [];\n  var code = tpl[0];\n\n  for (var i = 1; i < tpl.length; i++) {\n    var value = \"\".concat(prefix).concat(i - 1);\n    names.push(value);\n    code += value + tpl[i];\n  }\n\n  return {\n    names: names,\n    code: code\n  };\n}","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/node_modules/@babel/template/lib/literal.js"],"names":["Object","defineProperty","exports","value","default","literalTemplate","_options","require","_parse","_interopRequireDefault","_populate","obj","__esModule","formatter","tpl","opts","buildLiteralData","metadata","names","arg","defaultReplacements","forEach","replacement","i","replacements","normalizeReplacements","keys","key","prototype","hasOwnProperty","call","Error","unwrap","assign","nameSet","prefix","result","buildTemplateCode","Set","code","parser","placeholderWhitelist","concat","Array","from","placeholderPattern","preserveComments","syntacticPlaceholders","placeholders","some","placeholder","isDuplicate","has","name","length","push"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = literalTemplate;\n\nvar _options = require(\"./options\");\n\nvar _parse = _interopRequireDefault(require(\"./parse\"));\n\nvar _populate = _interopRequireDefault(require(\"./populate\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction literalTemplate(formatter, tpl, opts) {\n  const {\n    metadata,\n    names\n  } = buildLiteralData(formatter, tpl, opts);\n  return arg => {\n    const defaultReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n    return arg => {\n      const replacements = (0, _options.normalizeReplacements)(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\n\nfunction buildLiteralData(formatter, tpl, opts) {\n  let names;\n  let nameSet;\n  let metadata;\n  let prefix = \"\";\n\n  do {\n    prefix += \"$\";\n    const result = buildTemplateCode(tpl, prefix);\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders\n    });\n  } while (metadata.placeholders.some(placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name)));\n\n  return {\n    metadata,\n    names\n  };\n}\n\nfunction buildTemplateCode(tpl, prefix) {\n  const names = [];\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n    code += value + tpl[i];\n  }\n\n  return {\n    names,\n    code\n  };\n}"]},"metadata":{},"sourceType":"script"}