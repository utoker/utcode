{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTypedSelector } from './use-typed-selector';\n\nconst useCumulativeCode = cellId => {\n  _s();\n\n  return useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n    var show = (value) => {\n      const root = document.querySelector('#root');\n\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root);\n        } else {\n          root.innerHTML = JSON.stringify(value);\n        }\n      } else {\n        root.innerHTML = value;\n      }\n    };\n  `;\n    const showFuncNoop = 'var show = () => {}';\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cellId) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  }).join('\\n');\n};\n\n_s(useCumulativeCode, \"4E8l+eUOHjvoqwxLSolHjmdFz+I=\", false, function () {\n  return [useTypedSelector];\n});\n\nexport default useCumulativeCode;","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","data","order","cells","orderedCells","map","id","showFunc","showFuncNoop","cumulativeCode","c","type","push","content","join"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,sBAAjC;;AAEA,MAAMC,iBAAiB,GAAIC,MAAD,IAAoB;AAAA;;AAC5C,SAAOF,gBAAgB,CAAEG,KAAD,IAAW;AACjC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,KAA9B;AACA,UAAMC,YAAY,GAAGF,KAAK,CAACG,GAAN,CAAWC,EAAD,IAAQL,IAAI,CAACK,EAAD,CAAtB,CAArB;AAEA,UAAMC,QAAQ,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAhBI;AAiBA,UAAMC,YAAY,GAAG,qBAArB;AACA,UAAMC,cAAc,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAT,IAAcN,YAAd,EAA4B;AAC1B,UAAIM,CAAC,CAACC,IAAF,KAAW,MAAf,EAAuB;AACrB,YAAID,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACnBU,UAAAA,cAAc,CAACG,IAAf,CAAoBL,QAApB;AACD,SAFD,MAEO;AACLE,UAAAA,cAAc,CAACG,IAAf,CAAoBJ,YAApB;AACD;;AACDC,QAAAA,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB;AACD;;AACD,UAAIH,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACnB;AACD;AACF;;AACD,WAAOU,cAAP;AACD,GArCsB,CAAhB,CAqCJK,IArCI,CAqCC,IArCD,CAAP;AAsCD,CAvCD;;GAAMhB,iB;UACGD,gB;;;AAuCT,eAAeC,iBAAf","sourcesContent":["import { useTypedSelector } from './use-typed-selector';\n\nconst useCumulativeCode = (cellId: string) => {\n  return useTypedSelector((state) => {\n    const { data, order } = state.cells;\n    const orderedCells = order.map((id) => data[id]);\n\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n    var show = (value) => {\n      const root = document.querySelector('#root');\n\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root);\n        } else {\n          root.innerHTML = JSON.stringify(value);\n        }\n      } else {\n        root.innerHTML = value;\n      }\n    };\n  `;\n    const showFuncNoop = 'var show = () => {}';\n    const cumulativeCode = [];\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n        cumulativeCode.push(c.content);\n      }\n      if (c.id === cellId) {\n        break;\n      }\n    }\n    return cumulativeCode;\n  }).join('\\n');\n};\nexport default useCumulativeCode;\n"]},"metadata":{},"sourceType":"module"}