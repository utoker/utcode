{"ast":null,"code":"import _regeneratorRuntime from\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import bundle from'../../bundler';import{ActionType}from'../action-types';export var moveCell=function moveCell(id,direction){return{type:ActionType.MOVE_CELL,payload:{id:id,direction:direction}};};export var updateCell=function updateCell(id,content){return{type:ActionType.UPDATE_CELL,payload:{id:id,content:content}};};export var deleteCell=function deleteCell(id){return{type:ActionType.DELETE_CELL,payload:id};};export var insertCellAfter=function insertCellAfter(id,cellType){return{type:ActionType.INSERT_CELL_AFTER,payload:{id:id,type:cellType}};};export var createBundle=function createBundle(cellId,input){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:ActionType.BUNDLE_START,payload:{cellId:cellId}});_context.next=3;return bundle(input);case 3:result=_context.sent;dispatch({type:ActionType.BUNDLE_COMPLETE,payload:{cellId:cellId,bundle:result}});case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var fetchCells=function fetchCells(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var _yield$axios$get,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch({type:ActionType.FETCH_CELLS});_context2.prev=1;_context2.next=4;return axios.get('/cells');case 4:_yield$axios$get=_context2.sent;data=_yield$axios$get.data;dispatch({type:ActionType.FETCH_CELLS_COMPLETE,payload:data});_context2.next=12;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](1);dispatch({type:ActionType.FETCH_CELLS_ERROR,payload:_context2.t0.message});case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[1,9]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var saveCells=function saveCells(){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch,getState){var _getState,_getState$cells,data,order,cells;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_getState=getState(),_getState$cells=_getState.cells,data=_getState$cells.data,order=_getState$cells.order;cells=order.map(function(id){return data[id];});_context3.prev=2;_context3.next=5;return axios.post('/cells',{cells:cells});case 5:_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](2);dispatch({type:ActionType.SAVE_CELLS_ERROR,payload:_context3.t0.message});case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[2,7]]);}));return function(_x3,_x4){return _ref3.apply(this,arguments);};}();};","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/src/state/action-creators/index.ts"],"names":["axios","bundle","ActionType","moveCell","id","direction","type","MOVE_CELL","payload","updateCell","content","UPDATE_CELL","deleteCell","DELETE_CELL","insertCellAfter","cellType","INSERT_CELL_AFTER","createBundle","cellId","input","dispatch","BUNDLE_START","result","BUNDLE_COMPLETE","fetchCells","FETCH_CELLS","get","data","FETCH_CELLS_COMPLETE","FETCH_CELLS_ERROR","message","saveCells","getState","cells","order","map","post","SAVE_CELLS_ERROR"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\nimport axios from 'axios';\nimport bundle from '../../bundler';\nimport { ActionType } from '../action-types';\nimport {\n  DeleteCellAction,\n  Direction,\n  InsertCellAfterAction,\n  MoveCellAction,\n  UpdateCellAction,\n  Action,\n} from '../actions';\nimport { Cell, CellTypes } from '../cell';\nimport { RootState } from '../reducers';\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction,\n    },\n  };\n};\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content,\n    },\n  };\n};\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id,\n  };\n};\n\nexport const insertCellAfter = (\n  id: string | null,\n  cellType: CellTypes\n): InsertCellAfterAction => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType,\n    },\n  };\n};\n\nexport const createBundle = (cellId: string, input: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId,\n      },\n    });\n    const result = await bundle(input);\n\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result,\n      },\n    });\n  };\n};\n\nexport const fetchCells = () => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({ type: ActionType.FETCH_CELLS });\n    try {\n      const { data }: { data: Cell[] } = await axios.get('/cells');\n\n      dispatch({ type: ActionType.FETCH_CELLS_COMPLETE, payload: data });\n    } catch (error: any) {\n      dispatch({ type: ActionType.FETCH_CELLS_ERROR, payload: error.message });\n    }\n  };\n};\n\nexport const saveCells = () => {\n  return async (dispatch: Dispatch<Action>, getState: () => RootState) => {\n    const {\n      cells: { data, order },\n    } = getState();\n\n    const cells = order.map((id) => data[id]);\n\n    try {\n      await axios.post('/cells', { cells });\n    } catch (err: any) {\n      dispatch({ type: ActionType.SAVE_CELLS_ERROR, payload: err.message });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}