{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import'./cell-list.css';import{Fragment}from'react';import{useTypedSelector}from'../hooks/use-typed-selector';import AddCell from'./add-cell';import CellListItem from'./cell-list-item';var CellList=function CellList(){var cells=useTypedSelector(function(state){var cellsReducer=state.cells;return cellsReducer?cellsReducer.order.map(function(id){return cellsReducer.data[id];}):[];});var renderedCells=cells.map(function(cell){return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(CellListItem,{cell:cell}),/*#__PURE__*/_jsx(AddCell,{previousCellId:cell.id})]},cell.id);});return/*#__PURE__*/_jsxs(\"div\",{className:\"cell-list\",children:[/*#__PURE__*/_jsx(AddCell,{forceVisible:cells.length===0,previousCellId:null}),renderedCells]});};export default CellList;","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/src/components/cell-list.tsx"],"names":["Fragment","useTypedSelector","AddCell","CellListItem","CellList","cells","state","cellsReducer","order","map","id","data","renderedCells","cell","length"],"mappings":"wFAAA,MAAO,iBAAP,CACA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,gBAAT,KAAiC,6BAAjC,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,kBAAzB,CAEA,GAAMC,CAAAA,QAAkB,CAAG,QAArBA,CAAAA,QAAqB,EAAM,CAC/B,GAAMC,CAAAA,KAAK,CAAGJ,gBAAgB,CAAC,SAACK,KAAD,CAAW,CACxC,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACD,KAA3B,CACA,MAAOE,CAAAA,YAAY,CACfA,YAAY,CAACC,KAAb,CAAmBC,GAAnB,CAAuB,SAACC,EAAD,QAAQH,CAAAA,YAAY,CAACI,IAAb,CAAkBD,EAAlB,CAAR,EAAvB,CADe,CAEf,EAFJ,CAGD,CAL6B,CAA9B,CAMA,GAAME,CAAAA,aAAa,CAAGP,KAAK,CAACI,GAAN,CAAU,SAACI,IAAD,qBAC9B,MAAC,QAAD,yBACE,KAAC,YAAD,EAAc,IAAI,CAAEA,IAApB,EADF,cAEE,KAAC,OAAD,EAAS,cAAc,CAAEA,IAAI,CAACH,EAA9B,EAFF,GAAeG,IAAI,CAACH,EAApB,CAD8B,EAAV,CAAtB,CAOA,mBACE,aAAK,SAAS,CAAC,WAAf,wBACE,KAAC,OAAD,EAAS,YAAY,CAAEL,KAAK,CAACS,MAAN,GAAiB,CAAxC,CAA2C,cAAc,CAAE,IAA3D,EADF,CAEGF,aAFH,GADF,CAMD,CApBD,CAqBA,cAAeR,CAAAA,QAAf","sourcesContent":["import './cell-list.css';\nimport { Fragment } from 'react';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport AddCell from './add-cell';\nimport CellListItem from './cell-list-item';\n\nconst CellList: React.FC = () => {\n  const cells = useTypedSelector((state) => {\n    const cellsReducer = state.cells;\n    return cellsReducer\n      ? cellsReducer.order.map((id) => cellsReducer.data[id])\n      : [];\n  });\n  const renderedCells = cells.map((cell) => (\n    <Fragment key={cell.id}>\n      <CellListItem cell={cell} />\n      <AddCell previousCellId={cell.id} />\n    </Fragment>\n  ));\n\n  return (\n    <div className=\"cell-list\">\n      <AddCell forceVisible={cells.length === 0} previousCellId={null} />\n      {renderedCells}\n    </div>\n  );\n};\nexport default CellList;\n"]},"metadata":{},"sourceType":"module"}