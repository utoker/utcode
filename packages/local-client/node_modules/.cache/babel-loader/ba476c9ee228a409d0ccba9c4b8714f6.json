{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypeAnnotation = getTypeAnnotation;\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.couldBeBaseType = couldBeBaseType;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.isGenericType = isGenericType;\n\nvar inferers = _interopRequireWildcard(require(\"./inferers\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction getTypeAnnotation() {\n  if (this.typeAnnotation) return this.typeAnnotation;\n  var type = this._getTypeAnnotation() || t.anyTypeAnnotation();\n  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;\n  return this.typeAnnotation = type;\n}\n\nvar typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  var node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      var declar = this.parentPath.parentPath;\n      var declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return t.stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return t.anyTypeAnnotation();\n      }\n\n      return t.voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    var inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) == null ? void 0 : _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return t.isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return t.isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return t.isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return t.isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return t.isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return t.isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return t.isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(\"Unknown base type \".concat(baseName));\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  var type = this.getTypeAnnotation();\n  if (t.isAnyTypeAnnotation(type)) return true;\n\n  if (t.isUnionTypeAnnotation(type)) {\n    var _iterator = _createForOfIteratorHelper(type.types),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var type2 = _step.value;\n\n        if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(right) {\n  var left = this.getTypeAnnotation();\n  right = right.getTypeAnnotation();\n\n  if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n}\n\nfunction isGenericType(genericName) {\n  var type = this.getTypeAnnotation();\n  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, {\n    name: genericName\n  });\n}","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/node_modules/@babel/traverse/lib/path/inference/index.js"],"names":["Object","defineProperty","exports","value","getTypeAnnotation","_getTypeAnnotation","isBaseType","couldBeBaseType","baseTypeStrictlyMatches","isGenericType","inferers","_interopRequireWildcard","require","t","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","typeAnnotation","type","anyTypeAnnotation","isTypeAnnotation","typeAnnotationInferringNodes","WeakSet","node","parentPath","isVariableDeclarator","declar","declarParent","isForInStatement","stringTypeAnnotation","isForOfStatement","voidTypeAnnotation","add","_inferer","inferer","validParent","delete","baseName","soft","_isBaseType","isStringTypeAnnotation","isNumberTypeAnnotation","isBooleanTypeAnnotation","isAnyTypeAnnotation","isMixedTypeAnnotation","isEmptyTypeAnnotation","isVoidTypeAnnotation","Error","name","isUnionTypeAnnotation","types","type2","right","left","isFlowBaseAnnotation","genericName","isGenericTypeAnnotation","isIdentifier","id"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypeAnnotation = getTypeAnnotation;\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.couldBeBaseType = couldBeBaseType;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.isGenericType = isGenericType;\n\nvar inferers = _interopRequireWildcard(require(\"./inferers\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction getTypeAnnotation() {\n  if (this.typeAnnotation) return this.typeAnnotation;\n  let type = this._getTypeAnnotation() || t.anyTypeAnnotation();\n  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;\n  return this.typeAnnotation = type;\n}\n\nconst typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  const node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return t.stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return t.anyTypeAnnotation();\n      }\n\n      return t.voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    let inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) == null ? void 0 : _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return t.isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return t.isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return t.isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return t.isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return t.isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return t.isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return t.isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (t.isAnyTypeAnnotation(type)) return true;\n\n  if (t.isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(right) {\n  const left = this.getTypeAnnotation();\n  right = right.getTypeAnnotation();\n\n  if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n}\n\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, {\n    name: genericName\n  });\n}"]},"metadata":{},"sourceType":"script"}