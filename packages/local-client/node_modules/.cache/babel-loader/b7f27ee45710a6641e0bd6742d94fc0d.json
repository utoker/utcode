{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VariableDeclarator = VariableDeclarator;\nexports.TypeCastExpression = TypeCastExpression;\nexports.NewExpression = NewExpression;\nexports.TemplateLiteral = TemplateLiteral;\nexports.UnaryExpression = UnaryExpression;\nexports.BinaryExpression = BinaryExpression;\nexports.LogicalExpression = LogicalExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.AssignmentExpression = AssignmentExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.StringLiteral = StringLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NullLiteral = NullLiteral;\nexports.RegExpLiteral = RegExpLiteral;\nexports.ObjectExpression = ObjectExpression;\nexports.ArrayExpression = ArrayExpression;\nexports.RestElement = RestElement;\nexports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;\nexports.CallExpression = CallExpression;\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\nObject.defineProperty(exports, \"Identifier\", {\n  enumerable: true,\n  get: function () {\n    return _infererReference.default;\n  }\n});\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _infererReference = _interopRequireDefault(require(\"./inferer-reference\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction VariableDeclarator() {\n  var _type;\n\n  const id = this.get(\"id\");\n  if (!id.isIdentifier()) return;\n  const init = this.get(\"init\");\n  let type = init.getTypeAnnotation();\n\n  if (((_type = type) == null ? void 0 : _type.type) === \"AnyTypeAnnotation\") {\n    if (init.isCallExpression() && init.get(\"callee\").isIdentifier({\n      name: \"Array\"\n    }) && !init.scope.hasBinding(\"Array\", true)) {\n      type = ArrayExpression();\n    }\n  }\n\n  return type;\n}\n\nfunction TypeCastExpression(node) {\n  return node.typeAnnotation;\n}\n\nTypeCastExpression.validParent = true;\n\nfunction NewExpression(node) {\n  if (this.get(\"callee\").isIdentifier()) {\n    return t.genericTypeAnnotation(node.callee);\n  }\n}\n\nfunction TemplateLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction UnaryExpression(node) {\n  const operator = node.operator;\n\n  if (operator === \"void\") {\n    return t.voidTypeAnnotation();\n  } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.stringTypeAnnotation();\n  } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  }\n}\n\nfunction BinaryExpression(node) {\n  const operator = node.operator;\n\n  if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  } else if (operator === \"+\") {\n    const right = this.get(\"right\");\n    const left = this.get(\"left\");\n\n    if (left.isBaseType(\"number\") && right.isBaseType(\"number\")) {\n      return t.numberTypeAnnotation();\n    } else if (left.isBaseType(\"string\") || right.isBaseType(\"string\")) {\n      return t.stringTypeAnnotation();\n    }\n\n    return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);\n  }\n}\n\nfunction LogicalExpression() {\n  const argumentTypes = [this.get(\"left\").getTypeAnnotation(), this.get(\"right\").getTypeAnnotation()];\n\n  if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {\n    return t.createTSUnionType(argumentTypes);\n  }\n\n  if (t.createFlowUnionType) {\n    return t.createFlowUnionType(argumentTypes);\n  }\n\n  return t.createUnionTypeAnnotation(argumentTypes);\n}\n\nfunction ConditionalExpression() {\n  const argumentTypes = [this.get(\"consequent\").getTypeAnnotation(), this.get(\"alternate\").getTypeAnnotation()];\n\n  if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {\n    return t.createTSUnionType(argumentTypes);\n  }\n\n  if (t.createFlowUnionType) {\n    return t.createFlowUnionType(argumentTypes);\n  }\n\n  return t.createUnionTypeAnnotation(argumentTypes);\n}\n\nfunction SequenceExpression() {\n  return this.get(\"expressions\").pop().getTypeAnnotation();\n}\n\nfunction ParenthesizedExpression() {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nfunction AssignmentExpression() {\n  return this.get(\"right\").getTypeAnnotation();\n}\n\nfunction UpdateExpression(node) {\n  const operator = node.operator;\n\n  if (operator === \"++\" || operator === \"--\") {\n    return t.numberTypeAnnotation();\n  }\n}\n\nfunction StringLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction NumericLiteral() {\n  return t.numberTypeAnnotation();\n}\n\nfunction BooleanLiteral() {\n  return t.booleanTypeAnnotation();\n}\n\nfunction NullLiteral() {\n  return t.nullLiteralTypeAnnotation();\n}\n\nfunction RegExpLiteral() {\n  return t.genericTypeAnnotation(t.identifier(\"RegExp\"));\n}\n\nfunction ObjectExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Object\"));\n}\n\nfunction ArrayExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Array\"));\n}\n\nfunction RestElement() {\n  return ArrayExpression();\n}\n\nRestElement.validParent = true;\n\nfunction Func() {\n  return t.genericTypeAnnotation(t.identifier(\"Function\"));\n}\n\nconst isArrayFrom = t.buildMatchMemberExpression(\"Array.from\");\nconst isObjectKeys = t.buildMatchMemberExpression(\"Object.keys\");\nconst isObjectValues = t.buildMatchMemberExpression(\"Object.values\");\nconst isObjectEntries = t.buildMatchMemberExpression(\"Object.entries\");\n\nfunction CallExpression() {\n  const {\n    callee\n  } = this.node;\n\n  if (isObjectKeys(callee)) {\n    return t.arrayTypeAnnotation(t.stringTypeAnnotation());\n  } else if (isArrayFrom(callee) || isObjectValues(callee)) {\n    return t.arrayTypeAnnotation(t.anyTypeAnnotation());\n  } else if (isObjectEntries(callee)) {\n    return t.arrayTypeAnnotation(t.tupleTypeAnnotation([t.stringTypeAnnotation(), t.anyTypeAnnotation()]));\n  }\n\n  return resolveCall(this.get(\"callee\"));\n}\n\nfunction TaggedTemplateExpression() {\n  return resolveCall(this.get(\"tag\"));\n}\n\nfunction resolveCall(callee) {\n  callee = callee.resolve();\n\n  if (callee.isFunction()) {\n    if (callee.is(\"async\")) {\n      if (callee.is(\"generator\")) {\n        return t.genericTypeAnnotation(t.identifier(\"AsyncIterator\"));\n      } else {\n        return t.genericTypeAnnotation(t.identifier(\"Promise\"));\n      }\n    } else {\n      if (callee.node.returnType) {\n        return callee.node.returnType;\n      } else {}\n    }\n  }\n}","map":{"version":3,"sources":["/home/utoker/Projects/utcode/node_modules/@babel/traverse/lib/path/inference/inferers.js"],"names":["Object","defineProperty","exports","value","VariableDeclarator","TypeCastExpression","NewExpression","TemplateLiteral","UnaryExpression","BinaryExpression","LogicalExpression","ConditionalExpression","SequenceExpression","ParenthesizedExpression","AssignmentExpression","UpdateExpression","StringLiteral","NumericLiteral","BooleanLiteral","NullLiteral","RegExpLiteral","ObjectExpression","ArrayExpression","RestElement","ClassDeclaration","ClassExpression","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression","Func","CallExpression","TaggedTemplateExpression","enumerable","get","_infererReference","default","t","_interopRequireWildcard","require","_interopRequireDefault","obj","__esModule","_getRequireWildcardCache","WeakMap","cache","has","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_type","id","isIdentifier","init","type","getTypeAnnotation","isCallExpression","name","scope","hasBinding","node","typeAnnotation","validParent","genericTypeAnnotation","callee","stringTypeAnnotation","operator","voidTypeAnnotation","NUMBER_UNARY_OPERATORS","indexOf","numberTypeAnnotation","STRING_UNARY_OPERATORS","BOOLEAN_UNARY_OPERATORS","booleanTypeAnnotation","NUMBER_BINARY_OPERATORS","BOOLEAN_BINARY_OPERATORS","right","left","isBaseType","unionTypeAnnotation","argumentTypes","isTSTypeAnnotation","createTSUnionType","createFlowUnionType","createUnionTypeAnnotation","pop","nullLiteralTypeAnnotation","identifier","isArrayFrom","buildMatchMemberExpression","isObjectKeys","isObjectValues","isObjectEntries","arrayTypeAnnotation","anyTypeAnnotation","tupleTypeAnnotation","resolveCall","resolve","isFunction","is","returnType"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VariableDeclarator = VariableDeclarator;\nexports.TypeCastExpression = TypeCastExpression;\nexports.NewExpression = NewExpression;\nexports.TemplateLiteral = TemplateLiteral;\nexports.UnaryExpression = UnaryExpression;\nexports.BinaryExpression = BinaryExpression;\nexports.LogicalExpression = LogicalExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.AssignmentExpression = AssignmentExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.StringLiteral = StringLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NullLiteral = NullLiteral;\nexports.RegExpLiteral = RegExpLiteral;\nexports.ObjectExpression = ObjectExpression;\nexports.ArrayExpression = ArrayExpression;\nexports.RestElement = RestElement;\nexports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;\nexports.CallExpression = CallExpression;\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\nObject.defineProperty(exports, \"Identifier\", {\n  enumerable: true,\n  get: function () {\n    return _infererReference.default;\n  }\n});\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _infererReference = _interopRequireDefault(require(\"./inferer-reference\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction VariableDeclarator() {\n  var _type;\n\n  const id = this.get(\"id\");\n  if (!id.isIdentifier()) return;\n  const init = this.get(\"init\");\n  let type = init.getTypeAnnotation();\n\n  if (((_type = type) == null ? void 0 : _type.type) === \"AnyTypeAnnotation\") {\n    if (init.isCallExpression() && init.get(\"callee\").isIdentifier({\n      name: \"Array\"\n    }) && !init.scope.hasBinding(\"Array\", true)) {\n      type = ArrayExpression();\n    }\n  }\n\n  return type;\n}\n\nfunction TypeCastExpression(node) {\n  return node.typeAnnotation;\n}\n\nTypeCastExpression.validParent = true;\n\nfunction NewExpression(node) {\n  if (this.get(\"callee\").isIdentifier()) {\n    return t.genericTypeAnnotation(node.callee);\n  }\n}\n\nfunction TemplateLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction UnaryExpression(node) {\n  const operator = node.operator;\n\n  if (operator === \"void\") {\n    return t.voidTypeAnnotation();\n  } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.stringTypeAnnotation();\n  } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  }\n}\n\nfunction BinaryExpression(node) {\n  const operator = node.operator;\n\n  if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.numberTypeAnnotation();\n  } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return t.booleanTypeAnnotation();\n  } else if (operator === \"+\") {\n    const right = this.get(\"right\");\n    const left = this.get(\"left\");\n\n    if (left.isBaseType(\"number\") && right.isBaseType(\"number\")) {\n      return t.numberTypeAnnotation();\n    } else if (left.isBaseType(\"string\") || right.isBaseType(\"string\")) {\n      return t.stringTypeAnnotation();\n    }\n\n    return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);\n  }\n}\n\nfunction LogicalExpression() {\n  const argumentTypes = [this.get(\"left\").getTypeAnnotation(), this.get(\"right\").getTypeAnnotation()];\n\n  if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {\n    return t.createTSUnionType(argumentTypes);\n  }\n\n  if (t.createFlowUnionType) {\n    return t.createFlowUnionType(argumentTypes);\n  }\n\n  return t.createUnionTypeAnnotation(argumentTypes);\n}\n\nfunction ConditionalExpression() {\n  const argumentTypes = [this.get(\"consequent\").getTypeAnnotation(), this.get(\"alternate\").getTypeAnnotation()];\n\n  if (t.isTSTypeAnnotation(argumentTypes[0]) && t.createTSUnionType) {\n    return t.createTSUnionType(argumentTypes);\n  }\n\n  if (t.createFlowUnionType) {\n    return t.createFlowUnionType(argumentTypes);\n  }\n\n  return t.createUnionTypeAnnotation(argumentTypes);\n}\n\nfunction SequenceExpression() {\n  return this.get(\"expressions\").pop().getTypeAnnotation();\n}\n\nfunction ParenthesizedExpression() {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nfunction AssignmentExpression() {\n  return this.get(\"right\").getTypeAnnotation();\n}\n\nfunction UpdateExpression(node) {\n  const operator = node.operator;\n\n  if (operator === \"++\" || operator === \"--\") {\n    return t.numberTypeAnnotation();\n  }\n}\n\nfunction StringLiteral() {\n  return t.stringTypeAnnotation();\n}\n\nfunction NumericLiteral() {\n  return t.numberTypeAnnotation();\n}\n\nfunction BooleanLiteral() {\n  return t.booleanTypeAnnotation();\n}\n\nfunction NullLiteral() {\n  return t.nullLiteralTypeAnnotation();\n}\n\nfunction RegExpLiteral() {\n  return t.genericTypeAnnotation(t.identifier(\"RegExp\"));\n}\n\nfunction ObjectExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Object\"));\n}\n\nfunction ArrayExpression() {\n  return t.genericTypeAnnotation(t.identifier(\"Array\"));\n}\n\nfunction RestElement() {\n  return ArrayExpression();\n}\n\nRestElement.validParent = true;\n\nfunction Func() {\n  return t.genericTypeAnnotation(t.identifier(\"Function\"));\n}\n\nconst isArrayFrom = t.buildMatchMemberExpression(\"Array.from\");\nconst isObjectKeys = t.buildMatchMemberExpression(\"Object.keys\");\nconst isObjectValues = t.buildMatchMemberExpression(\"Object.values\");\nconst isObjectEntries = t.buildMatchMemberExpression(\"Object.entries\");\n\nfunction CallExpression() {\n  const {\n    callee\n  } = this.node;\n\n  if (isObjectKeys(callee)) {\n    return t.arrayTypeAnnotation(t.stringTypeAnnotation());\n  } else if (isArrayFrom(callee) || isObjectValues(callee)) {\n    return t.arrayTypeAnnotation(t.anyTypeAnnotation());\n  } else if (isObjectEntries(callee)) {\n    return t.arrayTypeAnnotation(t.tupleTypeAnnotation([t.stringTypeAnnotation(), t.anyTypeAnnotation()]));\n  }\n\n  return resolveCall(this.get(\"callee\"));\n}\n\nfunction TaggedTemplateExpression() {\n  return resolveCall(this.get(\"tag\"));\n}\n\nfunction resolveCall(callee) {\n  callee = callee.resolve();\n\n  if (callee.isFunction()) {\n    if (callee.is(\"async\")) {\n      if (callee.is(\"generator\")) {\n        return t.genericTypeAnnotation(t.identifier(\"AsyncIterator\"));\n      } else {\n        return t.genericTypeAnnotation(t.identifier(\"Promise\"));\n      }\n    } else {\n      if (callee.node.returnType) {\n        return callee.node.returnType;\n      } else {}\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}