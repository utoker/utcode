{"ast":null,"code":"import axios from 'axios';\nimport bundle from '../../bundler';\nimport { ActionType } from '../action-types';\nexport const moveCell = (id, direction) => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction\n    }\n  };\n};\nexport const updateCell = (id, content) => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content\n    }\n  };\n};\nexport const deleteCell = id => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id\n  };\n};\nexport const insertCellAfter = (id, cellType) => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType\n    }\n  };\n};\nexport const createBundle = (cellId, input) => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId\n      }\n    });\n    const result = await bundle(input);\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result\n      }\n    });\n  };\n};\nexport const fetchCells = () => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.FETCH_CELLS\n    });\n\n    try {\n      const {\n        data\n      } = await axios.get('/cells');\n      dispatch({\n        type: ActionType.FETCH_CELLS_COMPLETE,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: ActionType.FETCH_CELLS_ERROR,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const saveCells = () => {\n  return async (dispatch, getState) => {\n    const {\n      cells: {\n        data,\n        order\n      }\n    } = getState();\n    const cells = order.map(id => data[id]);\n\n    try {\n      await axios.post('/cells', {\n        cells\n      });\n    } catch (error) {}\n  };\n};","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/src/state/action-creators/index.ts"],"names":["axios","bundle","ActionType","moveCell","id","direction","type","MOVE_CELL","payload","updateCell","content","UPDATE_CELL","deleteCell","DELETE_CELL","insertCellAfter","cellType","INSERT_CELL_AFTER","createBundle","cellId","input","dispatch","BUNDLE_START","result","BUNDLE_COMPLETE","fetchCells","FETCH_CELLS","data","get","FETCH_CELLS_COMPLETE","error","FETCH_CELLS_ERROR","message","saveCells","getState","cells","order","map","post"],"mappings":"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","sourcesContent":["import { Dispatch } from 'redux';\nimport axios from 'axios';\nimport bundle from '../../bundler';\nimport { ActionType } from '../action-types';\nimport {\n  DeleteCellAction,\n  Direction,\n  InsertCellAfterAction,\n  MoveCellAction,\n  UpdateCellAction,\n  Action,\n} from '../actions';\nimport { Cell, CellTypes } from '../cell';\nimport { RootState } from '../reducers';\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction,\n    },\n  };\n};\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content,\n    },\n  };\n};\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id,\n  };\n};\n\nexport const insertCellAfter = (\n  id: string | null,\n  cellType: CellTypes\n): InsertCellAfterAction => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType,\n    },\n  };\n};\n\nexport const createBundle = (cellId: string, input: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId,\n      },\n    });\n    const result = await bundle(input);\n\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result,\n      },\n    });\n  };\n};\n\nexport const fetchCells = () => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({ type: ActionType.FETCH_CELLS });\n    try {\n      const { data }: { data: Cell[] } = await axios.get('/cells');\n\n      dispatch({ type: ActionType.FETCH_CELLS_COMPLETE, payload: data });\n    } catch (error: any) {\n      dispatch({ type: ActionType.FETCH_CELLS_ERROR, payload: error.message });\n    }\n  };\n};\n\nexport const saveCells = () => {\n  return async (dispatch: Dispatch<Action>, getState: () => RootState) => {\n    const {\n      cells: { data, order },\n    } = getState();\n\n    const cells = order.map((id) => data[id]);\n\n    try {\n      await axios.post('/cells', { cells });\n    } catch (error) {}\n  };\n};\n"]},"metadata":{},"sourceType":"module"}