{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports._replaceWith = _replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n\nvar _codeFrame = require(\"@babel/code-frame\");\n\nvar _index = _interopRequireDefault(require(\"../index\"));\n\nvar _index2 = _interopRequireDefault(require(\"./index\"));\n\nvar _cache = require(\"../cache\");\n\nvar _parser = require(\"@babel/parser\");\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar hoistVariablesVisitor = {\n  Function: function Function(path) {\n    path.skip();\n  },\n  VariableDeclaration: function VariableDeclaration(path) {\n    if (path.node.kind !== \"var\") return;\n    var bindings = path.getBindingIdentifiers();\n\n    for (var _i = 0, _Object$keys = Object.keys(bindings); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      path.scope.push({\n        id: bindings[key]\n      });\n    }\n\n    var exprs = [];\n\n    var _iterator = _createForOfIteratorHelper(path.node.declarations),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var declar = _step.value;\n\n        if (declar.init) {\n          exprs.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.id, declar.init)));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    path.replaceWithMultiple(exprs);\n  }\n};\n\nfunction replaceWithMultiple(nodes) {\n  var _pathCache$get;\n\n  this.resync();\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  (_pathCache$get = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get.delete(this.node);\n  this.node = this.container[this.key] = null;\n  var paths = this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n\n  return paths;\n}\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = \"(\".concat(replacement, \")\");\n    replacement = (0, _parser.parse)(replacement);\n  } catch (err) {\n    var loc = err.loc;\n\n    if (loc) {\n      err.message += \" - make sure this is an expression.\\n\" + (0, _codeFrame.codeFrameColumns)(replacement, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      });\n      err.code = \"BABEL_REPLACE_SOURCE_ERROR\";\n    }\n\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n\n  _index.default.removeProperties(replacement);\n\n  return this.replaceWith(replacement);\n}\n\nfunction replaceWith(replacement) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index2.default) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return [this];\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\");\n  }\n\n  var nodePath = \"\";\n\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {\n      replacement = t.expressionStatement(replacement);\n      nodePath = \"expression\";\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n\n  var oldNode = this.node;\n\n  if (oldNode) {\n    t.inheritsComments(replacement, oldNode);\n    t.removeComments(oldNode);\n  }\n\n  this._replaceWith(replacement);\n\n  this.type = replacement.type;\n  this.setScope();\n  this.requeue();\n  return [nodePath ? this.get(nodePath) : this];\n}\n\nfunction _replaceWith(node) {\n  var _pathCache$get2;\n\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    t.validate(this.parent, this.key, [node]);\n  } else {\n    t.validate(this.parent, this.key, node);\n  }\n\n  this.debug(\"Replace with \".concat(node == null ? void 0 : node.type));\n  (_pathCache$get2 = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get2.set(node, this).delete(this.node);\n  this.node = this.container[this.key] = node;\n}\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (toSequenceExpression) {\n    return this.replaceWith(toSequenceExpression)[0].get(\"expressions\");\n  }\n\n  var functionParent = this.getFunctionParent();\n  var isParentAsync = functionParent == null ? void 0 : functionParent.is(\"async\");\n  var container = t.arrowFunctionExpression([], t.blockStatement(nodes));\n  this.replaceWith(t.callExpression(container, []));\n  this.traverse(hoistVariablesVisitor);\n  var completionRecords = this.get(\"callee\").getCompletionRecords();\n\n  var _iterator2 = _createForOfIteratorHelper(completionRecords),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var path = _step2.value;\n      if (!path.isExpressionStatement()) continue;\n      var loop = path.findParent(function (path) {\n        return path.isLoop();\n      });\n\n      if (loop) {\n        var uid = loop.getData(\"expressionReplacementReturnUid\");\n\n        if (!uid) {\n          var _callee = this.get(\"callee\");\n\n          uid = _callee.scope.generateDeclaredUidIdentifier(\"ret\");\n\n          _callee.get(\"body\").pushContainer(\"body\", t.returnStatement(t.cloneNode(uid)));\n\n          loop.setData(\"expressionReplacementReturnUid\", uid);\n        } else {\n          uid = t.identifier(uid.name);\n        }\n\n        path.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", t.cloneNode(uid), path.node.expression));\n      } else {\n        path.replaceWith(t.returnStatement(path.node.expression));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var callee = this.get(\"callee\");\n  callee.arrowFunctionToExpression();\n\n  if (isParentAsync && _index.default.hasType(this.get(\"callee.body\").node, \"AwaitExpression\", t.FUNCTION_TYPES)) {\n    callee.set(\"async\", true);\n    this.replaceWith(t.awaitExpression(this.node));\n  }\n\n  return callee.get(\"body.body\");\n}\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n\n      var paths = this._containerInsertAfter(nodes);\n\n      this.remove();\n      return paths;\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/node_modules/@babel/traverse/lib/path/replacement.js"],"names":["Object","defineProperty","exports","value","replaceWithMultiple","replaceWithSourceString","replaceWith","_replaceWith","replaceExpressionWithStatements","replaceInline","_codeFrame","require","_index","_interopRequireDefault","_index2","_cache","_parser","t","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","hoistVariablesVisitor","Function","path","skip","VariableDeclaration","node","kind","bindings","getBindingIdentifiers","keys","scope","push","id","exprs","declarations","declar","init","expressionStatement","assignmentExpression","nodes","_pathCache$get","resync","_verifyNodeList","inheritLeadingComments","inheritTrailingComments","length","parent","delete","container","paths","insertAfter","requeue","remove","replacement","parse","err","loc","message","codeFrameColumns","start","line","column","code","program","body","expression","removeProperties","removed","Error","isProgram","Array","isArray","nodePath","isNodeType","isExpression","canHaveVariableDeclarationOrExpression","canSwapBetweenExpressionAndStatement","parentPath","isExportDefaultDeclaration","isStatement","oldNode","inheritsComments","removeComments","type","setScope","_pathCache$get2","ReferenceError","inList","validate","debug","toSequenceExpression","functionParent","getFunctionParent","isParentAsync","is","arrowFunctionExpression","blockStatement","callExpression","traverse","completionRecords","getCompletionRecords","isExpressionStatement","loop","findParent","isLoop","uid","getData","callee","generateDeclaredUidIdentifier","pushContainer","returnStatement","cloneNode","setData","identifier","name","arrowFunctionToExpression","hasType","FUNCTION_TYPES","awaitExpression","_containerInsertAfter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports._replaceWith = _replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n\nvar _codeFrame = require(\"@babel/code-frame\");\n\nvar _index = _interopRequireDefault(require(\"../index\"));\n\nvar _index2 = _interopRequireDefault(require(\"./index\"));\n\nvar _cache = require(\"../cache\");\n\nvar _parser = require(\"@babel/parser\");\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst hoistVariablesVisitor = {\n  Function(path) {\n    path.skip();\n  },\n\n  VariableDeclaration(path) {\n    if (path.node.kind !== \"var\") return;\n    const bindings = path.getBindingIdentifiers();\n\n    for (const key of Object.keys(bindings)) {\n      path.scope.push({\n        id: bindings[key]\n      });\n    }\n\n    const exprs = [];\n\n    for (const declar of path.node.declarations) {\n      if (declar.init) {\n        exprs.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.id, declar.init)));\n      }\n    }\n\n    path.replaceWithMultiple(exprs);\n  }\n\n};\n\nfunction replaceWithMultiple(nodes) {\n  var _pathCache$get;\n\n  this.resync();\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  (_pathCache$get = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get.delete(this.node);\n  this.node = this.container[this.key] = null;\n  const paths = this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n\n  return paths;\n}\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = `(${replacement})`;\n    replacement = (0, _parser.parse)(replacement);\n  } catch (err) {\n    const loc = err.loc;\n\n    if (loc) {\n      err.message += \" - make sure this is an expression.\\n\" + (0, _codeFrame.codeFrameColumns)(replacement, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      });\n      err.code = \"BABEL_REPLACE_SOURCE_ERROR\";\n    }\n\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n\n  _index.default.removeProperties(replacement);\n\n  return this.replaceWith(replacement);\n}\n\nfunction replaceWith(replacement) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index2.default) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return [this];\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\");\n  }\n\n  let nodePath = \"\";\n\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {\n      replacement = t.expressionStatement(replacement);\n      nodePath = \"expression\";\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n\n  const oldNode = this.node;\n\n  if (oldNode) {\n    t.inheritsComments(replacement, oldNode);\n    t.removeComments(oldNode);\n  }\n\n  this._replaceWith(replacement);\n\n  this.type = replacement.type;\n  this.setScope();\n  this.requeue();\n  return [nodePath ? this.get(nodePath) : this];\n}\n\nfunction _replaceWith(node) {\n  var _pathCache$get2;\n\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    t.validate(this.parent, this.key, [node]);\n  } else {\n    t.validate(this.parent, this.key, node);\n  }\n\n  this.debug(`Replace with ${node == null ? void 0 : node.type}`);\n  (_pathCache$get2 = _cache.path.get(this.parent)) == null ? void 0 : _pathCache$get2.set(node, this).delete(this.node);\n  this.node = this.container[this.key] = node;\n}\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n  const toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (toSequenceExpression) {\n    return this.replaceWith(toSequenceExpression)[0].get(\"expressions\");\n  }\n\n  const functionParent = this.getFunctionParent();\n  const isParentAsync = functionParent == null ? void 0 : functionParent.is(\"async\");\n  const container = t.arrowFunctionExpression([], t.blockStatement(nodes));\n  this.replaceWith(t.callExpression(container, []));\n  this.traverse(hoistVariablesVisitor);\n  const completionRecords = this.get(\"callee\").getCompletionRecords();\n\n  for (const path of completionRecords) {\n    if (!path.isExpressionStatement()) continue;\n    const loop = path.findParent(path => path.isLoop());\n\n    if (loop) {\n      let uid = loop.getData(\"expressionReplacementReturnUid\");\n\n      if (!uid) {\n        const callee = this.get(\"callee\");\n        uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n        callee.get(\"body\").pushContainer(\"body\", t.returnStatement(t.cloneNode(uid)));\n        loop.setData(\"expressionReplacementReturnUid\", uid);\n      } else {\n        uid = t.identifier(uid.name);\n      }\n\n      path.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", t.cloneNode(uid), path.node.expression));\n    } else {\n      path.replaceWith(t.returnStatement(path.node.expression));\n    }\n  }\n\n  const callee = this.get(\"callee\");\n  callee.arrowFunctionToExpression();\n\n  if (isParentAsync && _index.default.hasType(this.get(\"callee.body\").node, \"AwaitExpression\", t.FUNCTION_TYPES)) {\n    callee.set(\"async\", true);\n    this.replaceWith(t.awaitExpression(this.node));\n  }\n\n  return callee.get(\"body.body\");\n}\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n\n      const paths = this._containerInsertAfter(nodes);\n\n      this.remove();\n      return paths;\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}"]},"metadata":{},"sourceType":"script"}