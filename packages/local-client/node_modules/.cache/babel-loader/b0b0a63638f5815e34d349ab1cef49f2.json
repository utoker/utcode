{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/utoker/Projects/utcode/packages/local-client/src/components/code-editor.tsx\";\nimport MonacoEditor from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport './syntax.css';\nimport './code-editor.css';\nimport { parse } from '@babel/parser';\nimport traverse from '@babel/traverse';\nimport MonacoJSXHighlighter from 'monaco-jsx-highlighter';\n\nconst CodeEditor = ({\n  value,\n  onChange\n}) => {\n  const handleEditorDidMount = (editor, monaco) => {\n    const monacoJSXHighlighter = new MonacoJSXHighlighter(monaco, // references Range and other APIs\n    parse, // obtains an AST, internally passes to parse options: {...options, sourceType: \"module\",plugins: [\"jsx\"],errorRecovery: true}\n    traverse, // helps collecting the JSX expressions within the AST\n    editor // highlights the content of that editor via decorations\n    );\n    monacoJSXHighlighter.highlightOnDidChangeModelContent();\n  };\n\n  const handleEditorChange = code => {\n    onChange(code || '');\n  };\n\n  const onFormatClick = () => {\n    const formattedCode = prettier.format(value, {\n      parser: 'babel',\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true\n    }).replace(/\\n$/, '');\n    onChange(formattedCode);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button-format is-primary is-small\",\n      onClick: onFormatClick,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      onMount: handleEditorDidMount,\n      theme: \"vs-dark\",\n      height: \"100%\",\n      defaultLanguage: \"javascript\",\n      defaultValue: \"const a = 1\",\n      onChange: handleEditorChange,\n      value: value,\n      options: {\n        wordWrap: 'on',\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        // scrollBeyondLine: false,\n        automaticLayout: true // tabsize: 2,\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/src/components/code-editor.tsx"],"names":["MonacoEditor","prettier","parser","parse","traverse","MonacoJSXHighlighter","CodeEditor","value","onChange","handleEditorDidMount","editor","monaco","monacoJSXHighlighter","highlightOnDidChangeModelContent","handleEditorChange","code","onFormatClick","formattedCode","format","plugins","useTabs","semi","singleQuote","replace","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","automaticLayout"],"mappings":";;AAAA,OAAOA,YAAP,MAAgD,sBAAhD;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAO,cAAP;AACA,OAAO,mBAAP;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;;AAOA,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB;AACrE,QAAMC,oBAA6B,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AACxD,UAAMC,oBAAoB,GAAG,IAAIP,oBAAJ,CAC3BM,MAD2B,EACnB;AACRR,IAAAA,KAF2B,EAEpB;AACPC,IAAAA,QAH2B,EAGjB;AACVM,IAAAA,MAJ2B,CAIpB;AAJoB,KAA7B;AAOAE,IAAAA,oBAAoB,CAACC,gCAArB;AACD,GATD;;AAWA,QAAMC,kBAA4B,GAAIC,IAAD,IAAU;AAC7CP,IAAAA,QAAQ,CAACO,IAAI,IAAI,EAAT,CAAR;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AAC1B,UAAMC,aAAa,GAAGhB,QAAQ,CAC3BiB,MADmB,CACZX,KADY,EACL;AACbL,MAAAA,MAAM,EAAE,OADK;AAEbiB,MAAAA,OAAO,EAAE,CAACjB,MAAD,CAFI;AAGbkB,MAAAA,OAAO,EAAE,KAHI;AAIbC,MAAAA,IAAI,EAAE,IAJO;AAKbC,MAAAA,WAAW,EAAE;AALA,KADK,EAQnBC,OARmB,CAQX,KARW,EAQJ,EARI,CAAtB;AASAf,IAAAA,QAAQ,CAACS,aAAD,CAAR;AACD,GAXD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,0CADZ;AAEE,MAAA,OAAO,EAAED,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,YAAD;AACE,MAAA,OAAO,EAAEP,oBADX;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,MAAM,EAAC,MAHT;AAIE,MAAA,eAAe,EAAC,YAJlB;AAKE,MAAA,YAAY,EAAC,aALf;AAME,MAAA,QAAQ,EAAEK,kBANZ;AAOE,MAAA,KAAK,EAAEP,KAPT;AAQE,MAAA,OAAO,EAAE;AACPiB,QAAAA,QAAQ,EAAE,IADH;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFF;AAGPC,QAAAA,UAAU,EAAE,KAHL;AAIPC,QAAAA,OAAO,EAAE,KAJF;AAKPC,QAAAA,mBAAmB,EAAE,CALd;AAMPC,QAAAA,QAAQ,EAAE,EANH;AAOP;AACAC,QAAAA,eAAe,EAAE,IARV,CASP;;AATO;AARX;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA3DD;;KAAMzB,U;AA4DN,eAAeA,UAAf","sourcesContent":["import MonacoEditor, { OnChange, OnMount } from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport './syntax.css';\nimport './code-editor.css';\nimport { parse } from '@babel/parser';\nimport traverse from '@babel/traverse';\nimport MonacoJSXHighlighter from 'monaco-jsx-highlighter';\n\ninterface CodeEditorProps {\n  value: string;\n  onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ value, onChange }) => {\n  const handleEditorDidMount: OnMount = (editor, monaco) => {\n    const monacoJSXHighlighter = new MonacoJSXHighlighter(\n      monaco, // references Range and other APIs\n      parse, // obtains an AST, internally passes to parse options: {...options, sourceType: \"module\",plugins: [\"jsx\"],errorRecovery: true}\n      traverse, // helps collecting the JSX expressions within the AST\n      editor // highlights the content of that editor via decorations\n    );\n\n    monacoJSXHighlighter.highlightOnDidChangeModelContent();\n  };\n\n  const handleEditorChange: OnChange = (code) => {\n    onChange(code || '');\n  };\n\n  const onFormatClick = () => {\n    const formattedCode = prettier\n      .format(value, {\n        parser: 'babel',\n        plugins: [parser],\n        useTabs: false,\n        semi: true,\n        singleQuote: true,\n      })\n      .replace(/\\n$/, '');\n    onChange(formattedCode);\n  };\n\n  return (\n    <div className=\"editor-wrapper\">\n      <button\n        className=\"button button-format is-primary is-small\"\n        onClick={onFormatClick}\n      >\n        Format\n      </button>\n      <MonacoEditor\n        onMount={handleEditorDidMount}\n        theme=\"vs-dark\"\n        height=\"100%\"\n        defaultLanguage=\"javascript\"\n        defaultValue=\"const a = 1\"\n        onChange={handleEditorChange}\n        value={value}\n        options={{\n          wordWrap: 'on',\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          // scrollBeyondLine: false,\n          automaticLayout: true,\n          // tabsize: 2,\n        }}\n      />\n    </div>\n  );\n};\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}