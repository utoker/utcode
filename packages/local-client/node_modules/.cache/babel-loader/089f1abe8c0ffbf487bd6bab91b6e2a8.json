{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/utoker/Projects/utcode/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useActions } from '../hooks/use-actions';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  console.log(bundle);\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 800);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content, cell.id, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          value: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), bundle && /*#__PURE__*/_jsxDEV(Preview, {\n        code: bundle.code,\n        BundleStatus: bundle.err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"drpAkWiXS2fQt+ooxmYouDs1MXE=\", false, function () {\n  return [useActions, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/home/utoker/Projects/utcode/src/components/code-cell.tsx"],"names":["useEffect","useActions","CodeEditor","Preview","Resizable","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","console","log","timer","setTimeout","content","clearTimeout","height","display","flexDirection","value","code","err"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,gBAAT,QAAiC,6BAAjC;;AAKA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACtD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BR,UAAU,EAA/C;AACA,QAAMS,MAAM,GAAGL,gBAAgB,CAAEM,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAAZ,CAA/B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,KAAK,GAAGC,UAAU,CAAC,YAAY;AACnCR,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUN,IAAI,CAACW,OAAf,CAAZ;AACD,KAFuB,EAErB,GAFqB,CAAxB;AAGA,WAAO,MAAM;AACXC,MAAAA,YAAY,CAACH,KAAD,CAAZ;AACD,KAFD;AAGD,GAPQ,EAON,CAACT,IAAI,CAACW,OAAN,EAAeX,IAAI,CAACM,EAApB,EAAwBJ,YAAxB,CAPM,CAAT;AASA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACE;AACE,MAAA,KAAK,EAAE;AACLW,QAAAA,MAAM,EAAE,mBADH;AAELC,QAAAA,OAAO,EAAE,MAFJ;AAGLC,QAAAA,aAAa,EAAE;AAHV,OADT;AAAA,8BAOE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,KAAK,EAAEf,IAAI,CAACW,OADd;AAEE,UAAA,QAAQ,EAAGK,KAAD,IAAWf,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUU,KAAV;AAFjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,EAaGb,MAAM,iBAAI,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEA,MAAM,CAACc,IAAtB;AAA4B,QAAA,YAAY,EAAEd,MAAM,CAACe;AAAjD;AAAA;AAAA;AAAA;AAAA,cAbb;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAjCD;;GAAMnB,Q;UACiCL,U,EACtBI,gB;;;KAFXC,Q;AAmCN,eAAeA,QAAf","sourcesContent":["import { useEffect } from 'react';\nimport { useActions } from '../hooks/use-actions';\nimport { Cell } from '../state';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\n\ninterface CodeCellProps {\n  cell: Cell;\n}\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n  const { updateCell, createBundle } = useActions();\n  const bundle = useTypedSelector((state) => state.bundles[cell.id]);\n  console.log(bundle);\n\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 800);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.content, cell.id, createBundle]);\n\n  return (\n    <Resizable direction=\"vertical\">\n      <div\n        style={{\n          height: 'calc(100% - 10px)',\n          display: 'flex',\n          flexDirection: 'row',\n        }}\n      >\n        <Resizable direction=\"horizontal\">\n          <CodeEditor\n            value={cell.content}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n        {bundle && <Preview code={bundle.code} BundleStatus={bundle.err} />}\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}