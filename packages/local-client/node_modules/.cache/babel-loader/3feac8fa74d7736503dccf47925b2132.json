{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/utoker/Projects/utcode/src/components/text-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport './text-editor.css';\nimport MDEditor from '@uiw/react-md-editor';\nimport { useEffect, useRef, useState } from 'react';\nimport { useActions } from '../hooks/use-actions';\n\nconst TextEditor = ({\n  cell\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const [editing, setEditing] = useState(false);\n  const {\n    updateCell\n  } = useActions();\n  useEffect(() => {\n    const listener = ev => {\n      if (ref.current && ev.target && ref.current.contains(ev.target)) {\n        return;\n      }\n\n      setEditing(false);\n    };\n\n    document.addEventListener('click', listener, {\n      capture: true\n    });\n    return () => {\n      document.removeEventListener('click', listener, {\n        capture: true\n      });\n    };\n  }, []);\n\n  if (editing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      className: \"text-editor card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: /*#__PURE__*/_jsxDEV(MDEditor, {\n          value: cell.content,\n          onChange: v => updateCell(cell.id, v || '')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => setEditing(true),\n    className: \"text-editor card\",\n    children: /*#__PURE__*/_jsxDEV(MDEditor.Markdown, {\n      source: cell.content || 'Click to edit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TextEditor, \"qy3i4cd3e7xOxySUwxTsRLzeMEo=\", false, function () {\n  return [useActions];\n});\n\n_c = TextEditor;\nexport default TextEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/home/utoker/Projects/utcode/src/components/text-editor.tsx"],"names":["MDEditor","useEffect","useRef","useState","useActions","TextEditor","cell","ref","editing","setEditing","updateCell","listener","ev","current","target","contains","document","addEventListener","capture","removeEventListener","content","v","id"],"mappings":";;;;;AAAA,OAAO,mBAAP;AACA,OAAOA,QAAP,MAAqB,sBAArB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,SAASC,UAAT,QAA2B,sBAA3B;;AAMA,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC1D,QAAMC,GAAG,GAAGL,MAAM,CAAwB,IAAxB,CAAlB;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAiBN,UAAU,EAAjC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,QAAQ,GAAIC,EAAD,IAAoB;AACnC,UAAIL,GAAG,CAACM,OAAJ,IAAeD,EAAE,CAACE,MAAlB,IAA4BP,GAAG,CAACM,OAAJ,CAAYE,QAAZ,CAAqBH,EAAE,CAACE,MAAxB,CAAhC,EAAyE;AACvE;AACD;;AACDL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KALD;;AAMAO,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,QAAnC,EAA6C;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAA7C;AACA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCR,QAAtC,EAAgD;AAAEO,QAAAA,OAAO,EAAE;AAAX,OAAhD;AACD,KAFD;AAGD,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAIV,OAAJ,EAAa;AACX,wBACE;AAAK,MAAA,GAAG,EAAED,GAAV;AAAe,MAAA,SAAS,EAAC,kBAAzB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,KAAK,EAAED,IAAI,CAACc,OADd;AAEE,UAAA,QAAQ,EAAGC,CAAD,IAAOX,UAAU,CAACJ,IAAI,CAACgB,EAAN,EAAUD,CAAC,IAAI,EAAf;AAF7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAED,sBACE;AAAK,IAAA,OAAO,EAAE,MAAMZ,UAAU,CAAC,IAAD,CAA9B;AAAsC,IAAA,SAAS,EAAC,kBAAhD;AAAA,2BACE,QAAC,QAAD,CAAU,QAAV;AAAmB,MAAA,MAAM,EAAEH,IAAI,CAACc,OAAL,IAAgB;AAA3C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApCD;;GAAMf,U;UAGmBD,U;;;KAHnBC,U;AAqCN,eAAeA,UAAf","sourcesContent":["import './text-editor.css';\nimport MDEditor from '@uiw/react-md-editor';\nimport { useEffect, useRef, useState } from 'react';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\n\ninterface TextEditorProps {\n  cell: Cell;\n}\n\nconst TextEditor: React.FC<TextEditorProps> = ({ cell }) => {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [editing, setEditing] = useState(false);\n  const { updateCell } = useActions();\n\n  useEffect(() => {\n    const listener = (ev: MouseEvent) => {\n      if (ref.current && ev.target && ref.current.contains(ev.target as Node)) {\n        return;\n      }\n      setEditing(false);\n    };\n    document.addEventListener('click', listener, { capture: true });\n    return () => {\n      document.removeEventListener('click', listener, { capture: true });\n    };\n  }, []);\n\n  if (editing) {\n    return (\n      <div ref={ref} className=\"text-editor card\">\n        <div className=\"card-content\">\n          <MDEditor\n            value={cell.content}\n            onChange={(v) => updateCell(cell.id, v || '')}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div onClick={() => setEditing(true)} className=\"text-editor card\">\n      <MDEditor.Markdown source={cell.content || 'Click to edit'} />\n    </div>\n  );\n};\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}