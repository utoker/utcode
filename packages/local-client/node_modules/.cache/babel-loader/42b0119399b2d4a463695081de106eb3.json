{"ast":null,"code":"import _regeneratorRuntime from\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/utoker/Projects/utcode/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import bundle from'../../bundler';import{ActionType}from'../action-types';export var moveCell=function moveCell(id,direction){return{type:ActionType.MOVE_CELL,payload:{id:id,direction:direction}};};export var updateCell=function updateCell(id,content){return{type:ActionType.UPDATE_CELL,payload:{id:id,content:content}};};export var deleteCell=function deleteCell(id){return{type:ActionType.DELETE_CELL,payload:id};};export var insertCellAfter=function insertCellAfter(id,cellType){return{type:ActionType.INSERT_CELL_AFTER,payload:{id:id,type:cellType}};};export var createBundle=function createBundle(cellId,input){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:ActionType.BUNDLE_START,payload:{cellId:cellId}});_context.next=3;return bundle(input);case 3:result=_context.sent;dispatch({type:ActionType.BUNDLE_COMPLETE,payload:{cellId:cellId,bundle:result}});case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/home/utoker/Projects/utcode/packages/local-client/src/state/action-creators/index.ts"],"names":["bundle","ActionType","moveCell","id","direction","type","MOVE_CELL","payload","updateCell","content","UPDATE_CELL","deleteCell","DELETE_CELL","insertCellAfter","cellType","INSERT_CELL_AFTER","createBundle","cellId","input","dispatch","BUNDLE_START","result","BUNDLE_COMPLETE"],"mappings":"+UACA,MAAOA,CAAAA,MAAP,KAAmB,eAAnB,CACA,OAASC,UAAT,KAA2B,iBAA3B,CAWA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,EAAD,CAAaC,SAAb,CAAsD,CAC5E,MAAO,CACLC,IAAI,CAAEJ,UAAU,CAACK,SADZ,CAELC,OAAO,CAAE,CACPJ,EAAE,CAAFA,EADO,CAEPC,SAAS,CAATA,SAFO,CAFJ,CAAP,CAOD,CARM,CAUP,MAAO,IAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACL,EAAD,CAAaM,OAAb,CAAmD,CAC3E,MAAO,CACLJ,IAAI,CAAEJ,UAAU,CAACS,WADZ,CAELH,OAAO,CAAE,CACPJ,EAAE,CAAFA,EADO,CAEPM,OAAO,CAAPA,OAFO,CAFJ,CAAP,CAOD,CARM,CAUP,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACR,EAAD,CAAkC,CAC1D,MAAO,CACLE,IAAI,CAAEJ,UAAU,CAACW,WADZ,CAELL,OAAO,CAAEJ,EAFJ,CAAP,CAID,CALM,CAOP,MAAO,IAAMU,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAC7BV,EAD6B,CAE7BW,QAF6B,CAGH,CAC1B,MAAO,CACLT,IAAI,CAAEJ,UAAU,CAACc,iBADZ,CAELR,OAAO,CAAE,CACPJ,EAAE,CAAFA,EADO,CAEPE,IAAI,CAAES,QAFC,CAFJ,CAAP,CAOD,CAXM,CAaP,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAAiBC,KAAjB,CAAmC,CAC7D,+FAAO,iBAAOC,QAAP,6HACLA,QAAQ,CAAC,CACPd,IAAI,CAAEJ,UAAU,CAACmB,YADV,CAEPb,OAAO,CAAE,CACPU,MAAM,CAANA,MADO,CAFF,CAAD,CAAR,CADK,sBAOgBjB,CAAAA,MAAM,CAACkB,KAAD,CAPtB,QAOCG,MAPD,eASLF,QAAQ,CAAC,CACPd,IAAI,CAAEJ,UAAU,CAACqB,eADV,CAEPf,OAAO,CAAE,CACPU,MAAM,CAANA,MADO,CAEPjB,MAAM,CAAEqB,MAFD,CAFF,CAAD,CAAR,CATK,sDAAP,+DAiBD,CAlBM","sourcesContent":["import { Dispatch } from 'redux';\nimport bundle from '../../bundler';\nimport { ActionType } from '../action-types';\nimport {\n  DeleteCellAction,\n  Direction,\n  InsertCellAfterAction,\n  MoveCellAction,\n  UpdateCellAction,\n  Action,\n} from '../actions';\nimport { CellTypes } from '../cell';\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction,\n    },\n  };\n};\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content,\n    },\n  };\n};\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id,\n  };\n};\n\nexport const insertCellAfter = (\n  id: string | null,\n  cellType: CellTypes\n): InsertCellAfterAction => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType,\n    },\n  };\n};\n\nexport const createBundle = (cellId: string, input: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId,\n      },\n    });\n    const result = await bundle(input);\n\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result,\n      },\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}